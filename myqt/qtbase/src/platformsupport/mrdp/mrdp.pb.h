// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mrdp.proto

#ifndef PROTOBUF_mrdp_2eproto__INCLUDED
#define PROTOBUF_mrdp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mrdp {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mrdp_2eproto();
void protobuf_AssignDesc_mrdp_2eproto();
void protobuf_ShutdownFile_mrdp_2eproto();

class Rect;
class NegotiateReq;
class CloseReq;
class MotionActionReq;
class ButtonActionReq;
class KeyActionReq;
class ScreenUpdateReq;
class ScreenUpdateReportModeReq;
class Request;
class NegotiateResp;
class CloseResp;
class Response;
class NegotiateEvt;
class ScreenUpdatedEvt;
class ScreenResizedEvt;
class ServerShutdownEvt;
class Event;
class Message;

enum ProtocolVersion {
  PROTOVER_CURRENT = 65536
};
bool ProtocolVersion_IsValid(int value);
const ProtocolVersion ProtocolVersion_MIN = PROTOVER_CURRENT;
const ProtocolVersion ProtocolVersion_MAX = PROTOVER_CURRENT;
const int ProtocolVersion_ARRAYSIZE = ProtocolVersion_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProtocolVersion_descriptor();
inline const ::std::string& ProtocolVersion_Name(ProtocolVersion value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProtocolVersion_descriptor(), value);
}
inline bool ProtocolVersion_Parse(
    const ::std::string& name, ProtocolVersion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProtocolVersion>(
    ProtocolVersion_descriptor(), name, value);
}
enum Switch {
  SW_OFF = 0,
  SW_ON = 1
};
bool Switch_IsValid(int value);
const Switch Switch_MIN = SW_OFF;
const Switch Switch_MAX = SW_ON;
const int Switch_ARRAYSIZE = Switch_MAX + 1;

const ::google::protobuf::EnumDescriptor* Switch_descriptor();
inline const ::std::string& Switch_Name(Switch value) {
  return ::google::protobuf::internal::NameOfEnum(
    Switch_descriptor(), value);
}
inline bool Switch_Parse(
    const ::std::string& name, Switch* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Switch>(
    Switch_descriptor(), name, value);
}
enum ScreenUpdateReportMode {
  SURM_ACTIVE = 0,
  SURM_PASSIVE = 1
};
bool ScreenUpdateReportMode_IsValid(int value);
const ScreenUpdateReportMode ScreenUpdateReportMode_MIN = SURM_ACTIVE;
const ScreenUpdateReportMode ScreenUpdateReportMode_MAX = SURM_PASSIVE;
const int ScreenUpdateReportMode_ARRAYSIZE = ScreenUpdateReportMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ScreenUpdateReportMode_descriptor();
inline const ::std::string& ScreenUpdateReportMode_Name(ScreenUpdateReportMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ScreenUpdateReportMode_descriptor(), value);
}
inline bool ScreenUpdateReportMode_Parse(
    const ::std::string& name, ScreenUpdateReportMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ScreenUpdateReportMode>(
    ScreenUpdateReportMode_descriptor(), name, value);
}
enum ScreenUpdateMode {
  SUM_FULL = 0,
  SUM_INCREMENTAL = 1
};
bool ScreenUpdateMode_IsValid(int value);
const ScreenUpdateMode ScreenUpdateMode_MIN = SUM_FULL;
const ScreenUpdateMode ScreenUpdateMode_MAX = SUM_INCREMENTAL;
const int ScreenUpdateMode_ARRAYSIZE = ScreenUpdateMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ScreenUpdateMode_descriptor();
inline const ::std::string& ScreenUpdateMode_Name(ScreenUpdateMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ScreenUpdateMode_descriptor(), value);
}
inline bool ScreenUpdateMode_Parse(
    const ::std::string& name, ScreenUpdateMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ScreenUpdateMode>(
    ScreenUpdateMode_descriptor(), name, value);
}
enum ErrorNo {
  ERR_SUCCESS = 0,
  ERR_FAILURE_GENERIC = 1,
  ERR_NOT_SUPPORTED = 2,
  ERR_INVALID_PARAMETER = 3,
  ERR_LZO = 4
};
bool ErrorNo_IsValid(int value);
const ErrorNo ErrorNo_MIN = ERR_SUCCESS;
const ErrorNo ErrorNo_MAX = ERR_LZO;
const int ErrorNo_ARRAYSIZE = ErrorNo_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorNo_descriptor();
inline const ::std::string& ErrorNo_Name(ErrorNo value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorNo_descriptor(), value);
}
inline bool ErrorNo_Parse(
    const ::std::string& name, ErrorNo* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorNo>(
    ErrorNo_descriptor(), name, value);
}
enum Format {
  FMT_ARGB32_PREMUL = 0,
  FMT_ARGB32 = 1,
  FMT_RGB32 = 2,
  FMT_xBGR32 = 3,
  FMT_RGBA32 = 4,
  FMT_BGRA32_PREMUL = 5,
  FMT_UYVY = 6
};
bool Format_IsValid(int value);
const Format Format_MIN = FMT_ARGB32_PREMUL;
const Format Format_MAX = FMT_UYVY;
const int Format_ARRAYSIZE = Format_MAX + 1;

const ::google::protobuf::EnumDescriptor* Format_descriptor();
inline const ::std::string& Format_Name(Format value) {
  return ::google::protobuf::internal::NameOfEnum(
    Format_descriptor(), value);
}
inline bool Format_Parse(
    const ::std::string& name, Format* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Format>(
    Format_descriptor(), name, value);
}
enum MSG_ID {
  REQUEST_NEGOTIATION = 0,
  REQUEST_CLOSE = 1,
  REQUEST_MOTIONACTION = 2,
  REQUEST_BUTTONACTION = 3,
  REQUEST_KEYACTION = 4,
  REQUEST_SCREENUPDATE = 5,
  REQUEST_SCREENUPDATEREPORTMODE = 6,
  RESPONSE_NEGOTIATION = 100,
  RESPONSE_CLOSE = 101,
  EVENT_NEGOTIATION = 1000,
  EVENT_SCREENUPDATED = 1001,
  EVENT_SCREENRESIZED = 1002,
  EVENT_SERVERSHUTDOWN = 1003
};
bool MSG_ID_IsValid(int value);
const MSG_ID MSG_ID_MIN = REQUEST_NEGOTIATION;
const MSG_ID MSG_ID_MAX = EVENT_SERVERSHUTDOWN;
const int MSG_ID_ARRAYSIZE = MSG_ID_MAX + 1;

const ::google::protobuf::EnumDescriptor* MSG_ID_descriptor();
inline const ::std::string& MSG_ID_Name(MSG_ID value) {
  return ::google::protobuf::internal::NameOfEnum(
    MSG_ID_descriptor(), value);
}
inline bool MSG_ID_Parse(
    const ::std::string& name, MSG_ID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MSG_ID>(
    MSG_ID_descriptor(), name, value);
}
enum ButtonActionPress {
  BA_RELEASED = 0,
  BA_PRESSED = 1
};
bool ButtonActionPress_IsValid(int value);
const ButtonActionPress ButtonActionPress_MIN = BA_RELEASED;
const ButtonActionPress ButtonActionPress_MAX = BA_PRESSED;
const int ButtonActionPress_ARRAYSIZE = ButtonActionPress_MAX + 1;

const ::google::protobuf::EnumDescriptor* ButtonActionPress_descriptor();
inline const ::std::string& ButtonActionPress_Name(ButtonActionPress value) {
  return ::google::protobuf::internal::NameOfEnum(
    ButtonActionPress_descriptor(), value);
}
inline bool ButtonActionPress_Parse(
    const ::std::string& name, ButtonActionPress* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ButtonActionPress>(
    ButtonActionPress_descriptor(), name, value);
}
enum KeyActionDown {
  KA_UP = 0,
  KA_DOWN = 1
};
bool KeyActionDown_IsValid(int value);
const KeyActionDown KeyActionDown_MIN = KA_UP;
const KeyActionDown KeyActionDown_MAX = KA_DOWN;
const int KeyActionDown_ARRAYSIZE = KeyActionDown_MAX + 1;

const ::google::protobuf::EnumDescriptor* KeyActionDown_descriptor();
inline const ::std::string& KeyActionDown_Name(KeyActionDown value) {
  return ::google::protobuf::internal::NameOfEnum(
    KeyActionDown_descriptor(), value);
}
inline bool KeyActionDown_Parse(
    const ::std::string& name, KeyActionDown* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KeyActionDown>(
    KeyActionDown_descriptor(), name, value);
}
// ===================================================================

class Rect : public ::google::protobuf::Message {
 public:
  Rect();
  virtual ~Rect();

  Rect(const Rect& from);

  inline Rect& operator=(const Rect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rect& default_instance();

  void Swap(Rect* other);

  // implements Message ----------------------------------------------

  Rect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Rect& from);
  void MergeFrom(const Rect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // required uint32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // required uint32 w = 3;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 3;
  inline ::google::protobuf::uint32 w() const;
  inline void set_w(::google::protobuf::uint32 value);

  // required uint32 h = 4;
  inline bool has_h() const;
  inline void clear_h();
  static const int kHFieldNumber = 4;
  inline ::google::protobuf::uint32 h() const;
  inline void set_h(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mrdp.Rect)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_w();
  inline void clear_has_w();
  inline void set_has_h();
  inline void clear_has_h();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  ::google::protobuf::uint32 w_;
  ::google::protobuf::uint32 h_;
  friend void  protobuf_AddDesc_mrdp_2eproto();
  friend void protobuf_AssignDesc_mrdp_2eproto();
  friend void protobuf_ShutdownFile_mrdp_2eproto();

  void InitAsDefaultInstance();
  static Rect* default_instance_;
};
// -------------------------------------------------------------------

class NegotiateReq : public ::google::protobuf::Message {
 public:
  NegotiateReq();
  virtual ~NegotiateReq();

  NegotiateReq(const NegotiateReq& from);

  inline NegotiateReq& operator=(const NegotiateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NegotiateReq& default_instance();

  void Swap(NegotiateReq* other);

  // implements Message ----------------------------------------------

  NegotiateReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NegotiateReq& from);
  void MergeFrom(const NegotiateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mrdp.ProtocolVersion clientVersion = 1 [default = PROTOVER_CURRENT];
  inline bool has_clientversion() const;
  inline void clear_clientversion();
  static const int kClientVersionFieldNumber = 1;
  inline ::mrdp::ProtocolVersion clientversion() const;
  inline void set_clientversion(::mrdp::ProtocolVersion value);

  // required .mrdp.Switch compressPixels = 2;
  inline bool has_compresspixels() const;
  inline void clear_compresspixels();
  static const int kCompressPixelsFieldNumber = 2;
  inline ::mrdp::Switch compresspixels() const;
  inline void set_compresspixels(::mrdp::Switch value);

  // required .mrdp.ScreenUpdateReportMode surm = 3;
  inline bool has_surm() const;
  inline void clear_surm();
  static const int kSurmFieldNumber = 3;
  inline ::mrdp::ScreenUpdateReportMode surm() const;
  inline void set_surm(::mrdp::ScreenUpdateReportMode value);

  // @@protoc_insertion_point(class_scope:mrdp.NegotiateReq)
 private:
  inline void set_has_clientversion();
  inline void clear_has_clientversion();
  inline void set_has_compresspixels();
  inline void clear_has_compresspixels();
  inline void set_has_surm();
  inline void clear_has_surm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int clientversion_;
  int compresspixels_;
  int surm_;
  friend void  protobuf_AddDesc_mrdp_2eproto();
  friend void protobuf_AssignDesc_mrdp_2eproto();
  friend void protobuf_ShutdownFile_mrdp_2eproto();

  void InitAsDefaultInstance();
  static NegotiateReq* default_instance_;
};
// -------------------------------------------------------------------

class CloseReq : public ::google::protobuf::Message {
 public:
  CloseReq();
  virtual ~CloseReq();

  CloseReq(const CloseReq& from);

  inline CloseReq& operator=(const CloseReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CloseReq& default_instance();

  void Swap(CloseReq* other);

  // implements Message ----------------------------------------------

  CloseReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CloseReq& from);
  void MergeFrom(const CloseReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mrdp.CloseReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mrdp_2eproto();
  friend void protobuf_AssignDesc_mrdp_2eproto();
  friend void protobuf_ShutdownFile_mrdp_2eproto();

  void InitAsDefaultInstance();
  static CloseReq* default_instance_;
};
// -------------------------------------------------------------------

class MotionActionReq : public ::google::protobuf::Message {
 public:
  MotionActionReq();
  virtual ~MotionActionReq();

  MotionActionReq(const MotionActionReq& from);

  inline MotionActionReq& operator=(const MotionActionReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MotionActionReq& default_instance();

  void Swap(MotionActionReq* other);

  // implements Message ----------------------------------------------

  MotionActionReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MotionActionReq& from);
  void MergeFrom(const MotionActionReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // required uint32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:mrdp.MotionActionReq)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  friend void  protobuf_AddDesc_mrdp_2eproto();
  friend void protobuf_AssignDesc_mrdp_2eproto();
  friend void protobuf_ShutdownFile_mrdp_2eproto();

  void InitAsDefaultInstance();
  static MotionActionReq* default_instance_;
};
// -------------------------------------------------------------------

class ButtonActionReq : public ::google::protobuf::Message {
 public:
  ButtonActionReq();
  virtual ~ButtonActionReq();

  ButtonActionReq(const ButtonActionReq& from);

  inline ButtonActionReq& operator=(const ButtonActionReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ButtonActionReq& default_instance();

  void Swap(ButtonActionReq* other);

  // implements Message ----------------------------------------------

  ButtonActionReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ButtonActionReq& from);
  void MergeFrom(const ButtonActionReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 button = 1;
  inline bool has_button() const;
  inline void clear_button();
  static const int kButtonFieldNumber = 1;
  inline ::google::protobuf::uint32 button() const;
  inline void set_button(::google::protobuf::uint32 value);

  // required .mrdp.ButtonActionPress pressed = 2;
  inline bool has_pressed() const;
  inline void clear_pressed();
  static const int kPressedFieldNumber = 2;
  inline ::mrdp::ButtonActionPress pressed() const;
  inline void set_pressed(::mrdp::ButtonActionPress value);

  // @@protoc_insertion_point(class_scope:mrdp.ButtonActionReq)
 private:
  inline void set_has_button();
  inline void clear_has_button();
  inline void set_has_pressed();
  inline void clear_has_pressed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 button_;
  int pressed_;
  friend void  protobuf_AddDesc_mrdp_2eproto();
  friend void protobuf_AssignDesc_mrdp_2eproto();
  friend void protobuf_ShutdownFile_mrdp_2eproto();

  void InitAsDefaultInstance();
  static ButtonActionReq* default_instance_;
};
// -------------------------------------------------------------------

class KeyActionReq : public ::google::protobuf::Message {
 public:
  KeyActionReq();
  virtual ~KeyActionReq();

  KeyActionReq(const KeyActionReq& from);

  inline KeyActionReq& operator=(const KeyActionReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyActionReq& default_instance();

  void Swap(KeyActionReq* other);

  // implements Message ----------------------------------------------

  KeyActionReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyActionReq& from);
  void MergeFrom(const KeyActionReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::uint32 key() const;
  inline void set_key(::google::protobuf::uint32 value);

  // required .mrdp.KeyActionDown down = 2;
  inline bool has_down() const;
  inline void clear_down();
  static const int kDownFieldNumber = 2;
  inline ::mrdp::KeyActionDown down() const;
  inline void set_down(::mrdp::KeyActionDown value);

  // @@protoc_insertion_point(class_scope:mrdp.KeyActionReq)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_down();
  inline void clear_has_down();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 key_;
  int down_;
  friend void  protobuf_AddDesc_mrdp_2eproto();
  friend void protobuf_AssignDesc_mrdp_2eproto();
  friend void protobuf_ShutdownFile_mrdp_2eproto();

  void InitAsDefaultInstance();
  static KeyActionReq* default_instance_;
};
// -------------------------------------------------------------------

class ScreenUpdateReq : public ::google::protobuf::Message {
 public:
  ScreenUpdateReq();
  virtual ~ScreenUpdateReq();

  ScreenUpdateReq(const ScreenUpdateReq& from);

  inline ScreenUpdateReq& operator=(const ScreenUpdateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScreenUpdateReq& default_instance();

  void Swap(ScreenUpdateReq* other);

  // implements Message ----------------------------------------------

  ScreenUpdateReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScreenUpdateReq& from);
  void MergeFrom(const ScreenUpdateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mrdp.ScreenUpdateMode sum = 1;
  inline bool has_sum() const;
  inline void clear_sum();
  static const int kSumFieldNumber = 1;
  inline ::mrdp::ScreenUpdateMode sum() const;
  inline void set_sum(::mrdp::ScreenUpdateMode value);

  // @@protoc_insertion_point(class_scope:mrdp.ScreenUpdateReq)
 private:
  inline void set_has_sum();
  inline void clear_has_sum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int sum_;
  friend void  protobuf_AddDesc_mrdp_2eproto();
  friend void protobuf_AssignDesc_mrdp_2eproto();
  friend void protobuf_ShutdownFile_mrdp_2eproto();

  void InitAsDefaultInstance();
  static ScreenUpdateReq* default_instance_;
};
// -------------------------------------------------------------------

class ScreenUpdateReportModeReq : public ::google::protobuf::Message {
 public:
  ScreenUpdateReportModeReq();
  virtual ~ScreenUpdateReportModeReq();

  ScreenUpdateReportModeReq(const ScreenUpdateReportModeReq& from);

  inline ScreenUpdateReportModeReq& operator=(const ScreenUpdateReportModeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScreenUpdateReportModeReq& default_instance();

  void Swap(ScreenUpdateReportModeReq* other);

  // implements Message ----------------------------------------------

  ScreenUpdateReportModeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScreenUpdateReportModeReq& from);
  void MergeFrom(const ScreenUpdateReportModeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mrdp.ScreenUpdateReportMode surm = 1;
  inline bool has_surm() const;
  inline void clear_surm();
  static const int kSurmFieldNumber = 1;
  inline ::mrdp::ScreenUpdateReportMode surm() const;
  inline void set_surm(::mrdp::ScreenUpdateReportMode value);

  // @@protoc_insertion_point(class_scope:mrdp.ScreenUpdateReportModeReq)
 private:
  inline void set_has_surm();
  inline void clear_has_surm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int surm_;
  friend void  protobuf_AddDesc_mrdp_2eproto();
  friend void protobuf_AssignDesc_mrdp_2eproto();
  friend void protobuf_ShutdownFile_mrdp_2eproto();

  void InitAsDefaultInstance();
  static ScreenUpdateReportModeReq* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 clientID = 1;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientIDFieldNumber = 1;
  inline ::google::protobuf::uint32 clientid() const;
  inline void set_clientid(::google::protobuf::uint32 value);

  // optional .mrdp.NegotiateReq negoReq = 2;
  inline bool has_negoreq() const;
  inline void clear_negoreq();
  static const int kNegoReqFieldNumber = 2;
  inline const ::mrdp::NegotiateReq& negoreq() const;
  inline ::mrdp::NegotiateReq* mutable_negoreq();
  inline ::mrdp::NegotiateReq* release_negoreq();
  inline void set_allocated_negoreq(::mrdp::NegotiateReq* negoreq);

  // optional .mrdp.CloseReq closeReq = 3;
  inline bool has_closereq() const;
  inline void clear_closereq();
  static const int kCloseReqFieldNumber = 3;
  inline const ::mrdp::CloseReq& closereq() const;
  inline ::mrdp::CloseReq* mutable_closereq();
  inline ::mrdp::CloseReq* release_closereq();
  inline void set_allocated_closereq(::mrdp::CloseReq* closereq);

  // optional .mrdp.MotionActionReq maReq = 4;
  inline bool has_mareq() const;
  inline void clear_mareq();
  static const int kMaReqFieldNumber = 4;
  inline const ::mrdp::MotionActionReq& mareq() const;
  inline ::mrdp::MotionActionReq* mutable_mareq();
  inline ::mrdp::MotionActionReq* release_mareq();
  inline void set_allocated_mareq(::mrdp::MotionActionReq* mareq);

  // optional .mrdp.ButtonActionReq baReq = 5;
  inline bool has_bareq() const;
  inline void clear_bareq();
  static const int kBaReqFieldNumber = 5;
  inline const ::mrdp::ButtonActionReq& bareq() const;
  inline ::mrdp::ButtonActionReq* mutable_bareq();
  inline ::mrdp::ButtonActionReq* release_bareq();
  inline void set_allocated_bareq(::mrdp::ButtonActionReq* bareq);

  // optional .mrdp.KeyActionReq kaReq = 6;
  inline bool has_kareq() const;
  inline void clear_kareq();
  static const int kKaReqFieldNumber = 6;
  inline const ::mrdp::KeyActionReq& kareq() const;
  inline ::mrdp::KeyActionReq* mutable_kareq();
  inline ::mrdp::KeyActionReq* release_kareq();
  inline void set_allocated_kareq(::mrdp::KeyActionReq* kareq);

  // optional .mrdp.ScreenUpdateReq suReq = 7;
  inline bool has_sureq() const;
  inline void clear_sureq();
  static const int kSuReqFieldNumber = 7;
  inline const ::mrdp::ScreenUpdateReq& sureq() const;
  inline ::mrdp::ScreenUpdateReq* mutable_sureq();
  inline ::mrdp::ScreenUpdateReq* release_sureq();
  inline void set_allocated_sureq(::mrdp::ScreenUpdateReq* sureq);

  // optional .mrdp.ScreenUpdateReportModeReq surmReq = 8;
  inline bool has_surmreq() const;
  inline void clear_surmreq();
  static const int kSurmReqFieldNumber = 8;
  inline const ::mrdp::ScreenUpdateReportModeReq& surmreq() const;
  inline ::mrdp::ScreenUpdateReportModeReq* mutable_surmreq();
  inline ::mrdp::ScreenUpdateReportModeReq* release_surmreq();
  inline void set_allocated_surmreq(::mrdp::ScreenUpdateReportModeReq* surmreq);

  // @@protoc_insertion_point(class_scope:mrdp.Request)
 private:
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_negoreq();
  inline void clear_has_negoreq();
  inline void set_has_closereq();
  inline void clear_has_closereq();
  inline void set_has_mareq();
  inline void clear_has_mareq();
  inline void set_has_bareq();
  inline void clear_has_bareq();
  inline void set_has_kareq();
  inline void clear_has_kareq();
  inline void set_has_sureq();
  inline void clear_has_sureq();
  inline void set_has_surmreq();
  inline void clear_has_surmreq();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::mrdp::NegotiateReq* negoreq_;
  ::mrdp::CloseReq* closereq_;
  ::mrdp::MotionActionReq* mareq_;
  ::mrdp::ButtonActionReq* bareq_;
  ::mrdp::KeyActionReq* kareq_;
  ::mrdp::ScreenUpdateReq* sureq_;
  ::mrdp::ScreenUpdateReportModeReq* surmreq_;
  ::google::protobuf::uint32 clientid_;
  friend void  protobuf_AddDesc_mrdp_2eproto();
  friend void protobuf_AssignDesc_mrdp_2eproto();
  friend void protobuf_ShutdownFile_mrdp_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class NegotiateResp : public ::google::protobuf::Message {
 public:
  NegotiateResp();
  virtual ~NegotiateResp();

  NegotiateResp(const NegotiateResp& from);

  inline NegotiateResp& operator=(const NegotiateResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NegotiateResp& default_instance();

  void Swap(NegotiateResp* other);

  // implements Message ----------------------------------------------

  NegotiateResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NegotiateResp& from);
  void MergeFrom(const NegotiateResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mrdp.ProtocolVersion serverVersion = 1 [default = PROTOVER_CURRENT];
  inline bool has_serverversion() const;
  inline void clear_serverversion();
  static const int kServerVersionFieldNumber = 1;
  inline ::mrdp::ProtocolVersion serverversion() const;
  inline void set_serverversion(::mrdp::ProtocolVersion value);

  // required .mrdp.Format format = 2;
  inline bool has_format() const;
  inline void clear_format();
  static const int kFormatFieldNumber = 2;
  inline ::mrdp::Format format() const;
  inline void set_format(::mrdp::Format value);

  // required .mrdp.Switch pixelInBigEndian = 3;
  inline bool has_pixelinbigendian() const;
  inline void clear_pixelinbigendian();
  static const int kPixelInBigEndianFieldNumber = 3;
  inline ::mrdp::Switch pixelinbigendian() const;
  inline void set_pixelinbigendian(::mrdp::Switch value);

  // required .mrdp.Rect screenRect = 4;
  inline bool has_screenrect() const;
  inline void clear_screenrect();
  static const int kScreenRectFieldNumber = 4;
  inline const ::mrdp::Rect& screenrect() const;
  inline ::mrdp::Rect* mutable_screenrect();
  inline ::mrdp::Rect* release_screenrect();
  inline void set_allocated_screenrect(::mrdp::Rect* screenrect);

  // @@protoc_insertion_point(class_scope:mrdp.NegotiateResp)
 private:
  inline void set_has_serverversion();
  inline void clear_has_serverversion();
  inline void set_has_format();
  inline void clear_has_format();
  inline void set_has_pixelinbigendian();
  inline void clear_has_pixelinbigendian();
  inline void set_has_screenrect();
  inline void clear_has_screenrect();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int serverversion_;
  int format_;
  ::mrdp::Rect* screenrect_;
  int pixelinbigendian_;
  friend void  protobuf_AddDesc_mrdp_2eproto();
  friend void protobuf_AssignDesc_mrdp_2eproto();
  friend void protobuf_ShutdownFile_mrdp_2eproto();

  void InitAsDefaultInstance();
  static NegotiateResp* default_instance_;
};
// -------------------------------------------------------------------

class CloseResp : public ::google::protobuf::Message {
 public:
  CloseResp();
  virtual ~CloseResp();

  CloseResp(const CloseResp& from);

  inline CloseResp& operator=(const CloseResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CloseResp& default_instance();

  void Swap(CloseResp* other);

  // implements Message ----------------------------------------------

  CloseResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CloseResp& from);
  void MergeFrom(const CloseResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mrdp.CloseResp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mrdp_2eproto();
  friend void protobuf_AssignDesc_mrdp_2eproto();
  friend void protobuf_ShutdownFile_mrdp_2eproto();

  void InitAsDefaultInstance();
  static CloseResp* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 clientID = 1;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientIDFieldNumber = 1;
  inline ::google::protobuf::uint32 clientid() const;
  inline void set_clientid(::google::protobuf::uint32 value);

  // required .mrdp.ErrorNo error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline ::mrdp::ErrorNo error() const;
  inline void set_error(::mrdp::ErrorNo value);

  // optional .mrdp.NegotiateResp negoResp = 3;
  inline bool has_negoresp() const;
  inline void clear_negoresp();
  static const int kNegoRespFieldNumber = 3;
  inline const ::mrdp::NegotiateResp& negoresp() const;
  inline ::mrdp::NegotiateResp* mutable_negoresp();
  inline ::mrdp::NegotiateResp* release_negoresp();
  inline void set_allocated_negoresp(::mrdp::NegotiateResp* negoresp);

  // optional .mrdp.CloseResp closeResp = 4;
  inline bool has_closeresp() const;
  inline void clear_closeresp();
  static const int kCloseRespFieldNumber = 4;
  inline const ::mrdp::CloseResp& closeresp() const;
  inline ::mrdp::CloseResp* mutable_closeresp();
  inline ::mrdp::CloseResp* release_closeresp();
  inline void set_allocated_closeresp(::mrdp::CloseResp* closeresp);

  // @@protoc_insertion_point(class_scope:mrdp.Response)
 private:
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_negoresp();
  inline void clear_has_negoresp();
  inline void set_has_closeresp();
  inline void clear_has_closeresp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 clientid_;
  int error_;
  ::mrdp::NegotiateResp* negoresp_;
  ::mrdp::CloseResp* closeresp_;
  friend void  protobuf_AddDesc_mrdp_2eproto();
  friend void protobuf_AssignDesc_mrdp_2eproto();
  friend void protobuf_ShutdownFile_mrdp_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// -------------------------------------------------------------------

class NegotiateEvt : public ::google::protobuf::Message {
 public:
  NegotiateEvt();
  virtual ~NegotiateEvt();

  NegotiateEvt(const NegotiateEvt& from);

  inline NegotiateEvt& operator=(const NegotiateEvt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NegotiateEvt& default_instance();

  void Swap(NegotiateEvt* other);

  // implements Message ----------------------------------------------

  NegotiateEvt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NegotiateEvt& from);
  void MergeFrom(const NegotiateEvt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mrdp.ProtocolVersion serverVersion = 1 [default = PROTOVER_CURRENT];
  inline bool has_serverversion() const;
  inline void clear_serverversion();
  static const int kServerVersionFieldNumber = 1;
  inline ::mrdp::ProtocolVersion serverversion() const;
  inline void set_serverversion(::mrdp::ProtocolVersion value);

  // required .mrdp.Switch compressPixelSuggestion = 2;
  inline bool has_compresspixelsuggestion() const;
  inline void clear_compresspixelsuggestion();
  static const int kCompressPixelSuggestionFieldNumber = 2;
  inline ::mrdp::Switch compresspixelsuggestion() const;
  inline void set_compresspixelsuggestion(::mrdp::Switch value);

  // required .mrdp.ScreenUpdateReportMode surm = 3;
  inline bool has_surm() const;
  inline void clear_surm();
  static const int kSurmFieldNumber = 3;
  inline ::mrdp::ScreenUpdateReportMode surm() const;
  inline void set_surm(::mrdp::ScreenUpdateReportMode value);

  // @@protoc_insertion_point(class_scope:mrdp.NegotiateEvt)
 private:
  inline void set_has_serverversion();
  inline void clear_has_serverversion();
  inline void set_has_compresspixelsuggestion();
  inline void clear_has_compresspixelsuggestion();
  inline void set_has_surm();
  inline void clear_has_surm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int serverversion_;
  int compresspixelsuggestion_;
  int surm_;
  friend void  protobuf_AddDesc_mrdp_2eproto();
  friend void protobuf_AssignDesc_mrdp_2eproto();
  friend void protobuf_ShutdownFile_mrdp_2eproto();

  void InitAsDefaultInstance();
  static NegotiateEvt* default_instance_;
};
// -------------------------------------------------------------------

class ScreenUpdatedEvt : public ::google::protobuf::Message {
 public:
  ScreenUpdatedEvt();
  virtual ~ScreenUpdatedEvt();

  ScreenUpdatedEvt(const ScreenUpdatedEvt& from);

  inline ScreenUpdatedEvt& operator=(const ScreenUpdatedEvt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScreenUpdatedEvt& default_instance();

  void Swap(ScreenUpdatedEvt* other);

  // implements Message ----------------------------------------------

  ScreenUpdatedEvt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScreenUpdatedEvt& from);
  void MergeFrom(const ScreenUpdatedEvt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .mrdp.Rect dirtyRegion = 1;
  inline int dirtyregion_size() const;
  inline void clear_dirtyregion();
  static const int kDirtyRegionFieldNumber = 1;
  inline const ::mrdp::Rect& dirtyregion(int index) const;
  inline ::mrdp::Rect* mutable_dirtyregion(int index);
  inline ::mrdp::Rect* add_dirtyregion();
  inline const ::google::protobuf::RepeatedPtrField< ::mrdp::Rect >&
      dirtyregion() const;
  inline ::google::protobuf::RepeatedPtrField< ::mrdp::Rect >*
      mutable_dirtyregion();

  // optional bytes dirtyPixels = 2;
  inline bool has_dirtypixels() const;
  inline void clear_dirtypixels();
  static const int kDirtyPixelsFieldNumber = 2;
  inline const ::std::string& dirtypixels() const;
  inline void set_dirtypixels(const ::std::string& value);
  inline void set_dirtypixels(const char* value);
  inline void set_dirtypixels(const void* value, size_t size);
  inline ::std::string* mutable_dirtypixels();
  inline ::std::string* release_dirtypixels();
  inline void set_allocated_dirtypixels(::std::string* dirtypixels);

  // @@protoc_insertion_point(class_scope:mrdp.ScreenUpdatedEvt)
 private:
  inline void set_has_dirtypixels();
  inline void clear_has_dirtypixels();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::mrdp::Rect > dirtyregion_;
  ::std::string* dirtypixels_;
  friend void  protobuf_AddDesc_mrdp_2eproto();
  friend void protobuf_AssignDesc_mrdp_2eproto();
  friend void protobuf_ShutdownFile_mrdp_2eproto();

  void InitAsDefaultInstance();
  static ScreenUpdatedEvt* default_instance_;
};
// -------------------------------------------------------------------

class ScreenResizedEvt : public ::google::protobuf::Message {
 public:
  ScreenResizedEvt();
  virtual ~ScreenResizedEvt();

  ScreenResizedEvt(const ScreenResizedEvt& from);

  inline ScreenResizedEvt& operator=(const ScreenResizedEvt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScreenResizedEvt& default_instance();

  void Swap(ScreenResizedEvt* other);

  // implements Message ----------------------------------------------

  ScreenResizedEvt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScreenResizedEvt& from);
  void MergeFrom(const ScreenResizedEvt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mrdp.Rect screenRect = 1;
  inline bool has_screenrect() const;
  inline void clear_screenrect();
  static const int kScreenRectFieldNumber = 1;
  inline const ::mrdp::Rect& screenrect() const;
  inline ::mrdp::Rect* mutable_screenrect();
  inline ::mrdp::Rect* release_screenrect();
  inline void set_allocated_screenrect(::mrdp::Rect* screenrect);

  // @@protoc_insertion_point(class_scope:mrdp.ScreenResizedEvt)
 private:
  inline void set_has_screenrect();
  inline void clear_has_screenrect();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::mrdp::Rect* screenrect_;
  friend void  protobuf_AddDesc_mrdp_2eproto();
  friend void protobuf_AssignDesc_mrdp_2eproto();
  friend void protobuf_ShutdownFile_mrdp_2eproto();

  void InitAsDefaultInstance();
  static ScreenResizedEvt* default_instance_;
};
// -------------------------------------------------------------------

class ServerShutdownEvt : public ::google::protobuf::Message {
 public:
  ServerShutdownEvt();
  virtual ~ServerShutdownEvt();

  ServerShutdownEvt(const ServerShutdownEvt& from);

  inline ServerShutdownEvt& operator=(const ServerShutdownEvt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerShutdownEvt& default_instance();

  void Swap(ServerShutdownEvt* other);

  // implements Message ----------------------------------------------

  ServerShutdownEvt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerShutdownEvt& from);
  void MergeFrom(const ServerShutdownEvt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mrdp.ServerShutdownEvt)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_mrdp_2eproto();
  friend void protobuf_AssignDesc_mrdp_2eproto();
  friend void protobuf_ShutdownFile_mrdp_2eproto();

  void InitAsDefaultInstance();
  static ServerShutdownEvt* default_instance_;
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::Message {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  void Swap(Event* other);

  // implements Message ----------------------------------------------

  Event* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 clientID = 1;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientIDFieldNumber = 1;
  inline ::google::protobuf::uint32 clientid() const;
  inline void set_clientid(::google::protobuf::uint32 value);

  // optional .mrdp.NegotiateEvt negoEvt = 2;
  inline bool has_negoevt() const;
  inline void clear_negoevt();
  static const int kNegoEvtFieldNumber = 2;
  inline const ::mrdp::NegotiateEvt& negoevt() const;
  inline ::mrdp::NegotiateEvt* mutable_negoevt();
  inline ::mrdp::NegotiateEvt* release_negoevt();
  inline void set_allocated_negoevt(::mrdp::NegotiateEvt* negoevt);

  // optional .mrdp.ScreenUpdatedEvt suEvt = 3;
  inline bool has_suevt() const;
  inline void clear_suevt();
  static const int kSuEvtFieldNumber = 3;
  inline const ::mrdp::ScreenUpdatedEvt& suevt() const;
  inline ::mrdp::ScreenUpdatedEvt* mutable_suevt();
  inline ::mrdp::ScreenUpdatedEvt* release_suevt();
  inline void set_allocated_suevt(::mrdp::ScreenUpdatedEvt* suevt);

  // optional .mrdp.ScreenResizedEvt srEvt = 4;
  inline bool has_srevt() const;
  inline void clear_srevt();
  static const int kSrEvtFieldNumber = 4;
  inline const ::mrdp::ScreenResizedEvt& srevt() const;
  inline ::mrdp::ScreenResizedEvt* mutable_srevt();
  inline ::mrdp::ScreenResizedEvt* release_srevt();
  inline void set_allocated_srevt(::mrdp::ScreenResizedEvt* srevt);

  // optional .mrdp.ServerShutdownEvt ssEvt = 5;
  inline bool has_ssevt() const;
  inline void clear_ssevt();
  static const int kSsEvtFieldNumber = 5;
  inline const ::mrdp::ServerShutdownEvt& ssevt() const;
  inline ::mrdp::ServerShutdownEvt* mutable_ssevt();
  inline ::mrdp::ServerShutdownEvt* release_ssevt();
  inline void set_allocated_ssevt(::mrdp::ServerShutdownEvt* ssevt);

  // @@protoc_insertion_point(class_scope:mrdp.Event)
 private:
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_negoevt();
  inline void clear_has_negoevt();
  inline void set_has_suevt();
  inline void clear_has_suevt();
  inline void set_has_srevt();
  inline void clear_has_srevt();
  inline void set_has_ssevt();
  inline void clear_has_ssevt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::mrdp::NegotiateEvt* negoevt_;
  ::mrdp::ScreenUpdatedEvt* suevt_;
  ::mrdp::ScreenResizedEvt* srevt_;
  ::mrdp::ServerShutdownEvt* ssevt_;
  ::google::protobuf::uint32 clientid_;
  friend void  protobuf_AddDesc_mrdp_2eproto();
  friend void protobuf_AssignDesc_mrdp_2eproto();
  friend void protobuf_ShutdownFile_mrdp_2eproto();

  void InitAsDefaultInstance();
  static Event* default_instance_;
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mrdp.MSG_ID id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::mrdp::MSG_ID id() const;
  inline void set_id(::mrdp::MSG_ID value);

  // optional .mrdp.Request req = 2;
  inline bool has_req() const;
  inline void clear_req();
  static const int kReqFieldNumber = 2;
  inline const ::mrdp::Request& req() const;
  inline ::mrdp::Request* mutable_req();
  inline ::mrdp::Request* release_req();
  inline void set_allocated_req(::mrdp::Request* req);

  // optional .mrdp.Response resp = 3;
  inline bool has_resp() const;
  inline void clear_resp();
  static const int kRespFieldNumber = 3;
  inline const ::mrdp::Response& resp() const;
  inline ::mrdp::Response* mutable_resp();
  inline ::mrdp::Response* release_resp();
  inline void set_allocated_resp(::mrdp::Response* resp);

  // optional .mrdp.Event evt = 4;
  inline bool has_evt() const;
  inline void clear_evt();
  static const int kEvtFieldNumber = 4;
  inline const ::mrdp::Event& evt() const;
  inline ::mrdp::Event* mutable_evt();
  inline ::mrdp::Event* release_evt();
  inline void set_allocated_evt(::mrdp::Event* evt);

  // @@protoc_insertion_point(class_scope:mrdp.Message)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_req();
  inline void clear_has_req();
  inline void set_has_resp();
  inline void clear_has_resp();
  inline void set_has_evt();
  inline void clear_has_evt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::mrdp::Request* req_;
  ::mrdp::Response* resp_;
  ::mrdp::Event* evt_;
  int id_;
  friend void  protobuf_AddDesc_mrdp_2eproto();
  friend void protobuf_AssignDesc_mrdp_2eproto();
  friend void protobuf_ShutdownFile_mrdp_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// ===================================================================


// ===================================================================

// Rect

// required uint32 x = 1;
inline bool Rect::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rect::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Rect::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Rect::clear_x() {
  x_ = 0u;
  clear_has_x();
}
inline ::google::protobuf::uint32 Rect::x() const {
  // @@protoc_insertion_point(field_get:mrdp.Rect.x)
  return x_;
}
inline void Rect::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:mrdp.Rect.x)
}

// required uint32 y = 2;
inline bool Rect::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Rect::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Rect::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Rect::clear_y() {
  y_ = 0u;
  clear_has_y();
}
inline ::google::protobuf::uint32 Rect::y() const {
  // @@protoc_insertion_point(field_get:mrdp.Rect.y)
  return y_;
}
inline void Rect::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:mrdp.Rect.y)
}

// required uint32 w = 3;
inline bool Rect::has_w() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Rect::set_has_w() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Rect::clear_has_w() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Rect::clear_w() {
  w_ = 0u;
  clear_has_w();
}
inline ::google::protobuf::uint32 Rect::w() const {
  // @@protoc_insertion_point(field_get:mrdp.Rect.w)
  return w_;
}
inline void Rect::set_w(::google::protobuf::uint32 value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:mrdp.Rect.w)
}

// required uint32 h = 4;
inline bool Rect::has_h() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Rect::set_has_h() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Rect::clear_has_h() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Rect::clear_h() {
  h_ = 0u;
  clear_has_h();
}
inline ::google::protobuf::uint32 Rect::h() const {
  // @@protoc_insertion_point(field_get:mrdp.Rect.h)
  return h_;
}
inline void Rect::set_h(::google::protobuf::uint32 value) {
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:mrdp.Rect.h)
}

// -------------------------------------------------------------------

// NegotiateReq

// required .mrdp.ProtocolVersion clientVersion = 1 [default = PROTOVER_CURRENT];
inline bool NegotiateReq::has_clientversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NegotiateReq::set_has_clientversion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NegotiateReq::clear_has_clientversion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NegotiateReq::clear_clientversion() {
  clientversion_ = 65536;
  clear_has_clientversion();
}
inline ::mrdp::ProtocolVersion NegotiateReq::clientversion() const {
  // @@protoc_insertion_point(field_get:mrdp.NegotiateReq.clientVersion)
  return static_cast< ::mrdp::ProtocolVersion >(clientversion_);
}
inline void NegotiateReq::set_clientversion(::mrdp::ProtocolVersion value) {
  assert(::mrdp::ProtocolVersion_IsValid(value));
  set_has_clientversion();
  clientversion_ = value;
  // @@protoc_insertion_point(field_set:mrdp.NegotiateReq.clientVersion)
}

// required .mrdp.Switch compressPixels = 2;
inline bool NegotiateReq::has_compresspixels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NegotiateReq::set_has_compresspixels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NegotiateReq::clear_has_compresspixels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NegotiateReq::clear_compresspixels() {
  compresspixels_ = 0;
  clear_has_compresspixels();
}
inline ::mrdp::Switch NegotiateReq::compresspixels() const {
  // @@protoc_insertion_point(field_get:mrdp.NegotiateReq.compressPixels)
  return static_cast< ::mrdp::Switch >(compresspixels_);
}
inline void NegotiateReq::set_compresspixels(::mrdp::Switch value) {
  assert(::mrdp::Switch_IsValid(value));
  set_has_compresspixels();
  compresspixels_ = value;
  // @@protoc_insertion_point(field_set:mrdp.NegotiateReq.compressPixels)
}

// required .mrdp.ScreenUpdateReportMode surm = 3;
inline bool NegotiateReq::has_surm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NegotiateReq::set_has_surm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NegotiateReq::clear_has_surm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NegotiateReq::clear_surm() {
  surm_ = 0;
  clear_has_surm();
}
inline ::mrdp::ScreenUpdateReportMode NegotiateReq::surm() const {
  // @@protoc_insertion_point(field_get:mrdp.NegotiateReq.surm)
  return static_cast< ::mrdp::ScreenUpdateReportMode >(surm_);
}
inline void NegotiateReq::set_surm(::mrdp::ScreenUpdateReportMode value) {
  assert(::mrdp::ScreenUpdateReportMode_IsValid(value));
  set_has_surm();
  surm_ = value;
  // @@protoc_insertion_point(field_set:mrdp.NegotiateReq.surm)
}

// -------------------------------------------------------------------

// CloseReq

// -------------------------------------------------------------------

// MotionActionReq

// required uint32 x = 1;
inline bool MotionActionReq::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MotionActionReq::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MotionActionReq::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MotionActionReq::clear_x() {
  x_ = 0u;
  clear_has_x();
}
inline ::google::protobuf::uint32 MotionActionReq::x() const {
  // @@protoc_insertion_point(field_get:mrdp.MotionActionReq.x)
  return x_;
}
inline void MotionActionReq::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:mrdp.MotionActionReq.x)
}

// required uint32 y = 2;
inline bool MotionActionReq::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MotionActionReq::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MotionActionReq::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MotionActionReq::clear_y() {
  y_ = 0u;
  clear_has_y();
}
inline ::google::protobuf::uint32 MotionActionReq::y() const {
  // @@protoc_insertion_point(field_get:mrdp.MotionActionReq.y)
  return y_;
}
inline void MotionActionReq::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:mrdp.MotionActionReq.y)
}

// -------------------------------------------------------------------

// ButtonActionReq

// required uint32 button = 1;
inline bool ButtonActionReq::has_button() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ButtonActionReq::set_has_button() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ButtonActionReq::clear_has_button() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ButtonActionReq::clear_button() {
  button_ = 0u;
  clear_has_button();
}
inline ::google::protobuf::uint32 ButtonActionReq::button() const {
  // @@protoc_insertion_point(field_get:mrdp.ButtonActionReq.button)
  return button_;
}
inline void ButtonActionReq::set_button(::google::protobuf::uint32 value) {
  set_has_button();
  button_ = value;
  // @@protoc_insertion_point(field_set:mrdp.ButtonActionReq.button)
}

// required .mrdp.ButtonActionPress pressed = 2;
inline bool ButtonActionReq::has_pressed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ButtonActionReq::set_has_pressed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ButtonActionReq::clear_has_pressed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ButtonActionReq::clear_pressed() {
  pressed_ = 0;
  clear_has_pressed();
}
inline ::mrdp::ButtonActionPress ButtonActionReq::pressed() const {
  // @@protoc_insertion_point(field_get:mrdp.ButtonActionReq.pressed)
  return static_cast< ::mrdp::ButtonActionPress >(pressed_);
}
inline void ButtonActionReq::set_pressed(::mrdp::ButtonActionPress value) {
  assert(::mrdp::ButtonActionPress_IsValid(value));
  set_has_pressed();
  pressed_ = value;
  // @@protoc_insertion_point(field_set:mrdp.ButtonActionReq.pressed)
}

// -------------------------------------------------------------------

// KeyActionReq

// required uint32 key = 1;
inline bool KeyActionReq::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeyActionReq::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeyActionReq::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeyActionReq::clear_key() {
  key_ = 0u;
  clear_has_key();
}
inline ::google::protobuf::uint32 KeyActionReq::key() const {
  // @@protoc_insertion_point(field_get:mrdp.KeyActionReq.key)
  return key_;
}
inline void KeyActionReq::set_key(::google::protobuf::uint32 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:mrdp.KeyActionReq.key)
}

// required .mrdp.KeyActionDown down = 2;
inline bool KeyActionReq::has_down() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeyActionReq::set_has_down() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KeyActionReq::clear_has_down() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KeyActionReq::clear_down() {
  down_ = 0;
  clear_has_down();
}
inline ::mrdp::KeyActionDown KeyActionReq::down() const {
  // @@protoc_insertion_point(field_get:mrdp.KeyActionReq.down)
  return static_cast< ::mrdp::KeyActionDown >(down_);
}
inline void KeyActionReq::set_down(::mrdp::KeyActionDown value) {
  assert(::mrdp::KeyActionDown_IsValid(value));
  set_has_down();
  down_ = value;
  // @@protoc_insertion_point(field_set:mrdp.KeyActionReq.down)
}

// -------------------------------------------------------------------

// ScreenUpdateReq

// required .mrdp.ScreenUpdateMode sum = 1;
inline bool ScreenUpdateReq::has_sum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScreenUpdateReq::set_has_sum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScreenUpdateReq::clear_has_sum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScreenUpdateReq::clear_sum() {
  sum_ = 0;
  clear_has_sum();
}
inline ::mrdp::ScreenUpdateMode ScreenUpdateReq::sum() const {
  // @@protoc_insertion_point(field_get:mrdp.ScreenUpdateReq.sum)
  return static_cast< ::mrdp::ScreenUpdateMode >(sum_);
}
inline void ScreenUpdateReq::set_sum(::mrdp::ScreenUpdateMode value) {
  assert(::mrdp::ScreenUpdateMode_IsValid(value));
  set_has_sum();
  sum_ = value;
  // @@protoc_insertion_point(field_set:mrdp.ScreenUpdateReq.sum)
}

// -------------------------------------------------------------------

// ScreenUpdateReportModeReq

// required .mrdp.ScreenUpdateReportMode surm = 1;
inline bool ScreenUpdateReportModeReq::has_surm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScreenUpdateReportModeReq::set_has_surm() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScreenUpdateReportModeReq::clear_has_surm() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScreenUpdateReportModeReq::clear_surm() {
  surm_ = 0;
  clear_has_surm();
}
inline ::mrdp::ScreenUpdateReportMode ScreenUpdateReportModeReq::surm() const {
  // @@protoc_insertion_point(field_get:mrdp.ScreenUpdateReportModeReq.surm)
  return static_cast< ::mrdp::ScreenUpdateReportMode >(surm_);
}
inline void ScreenUpdateReportModeReq::set_surm(::mrdp::ScreenUpdateReportMode value) {
  assert(::mrdp::ScreenUpdateReportMode_IsValid(value));
  set_has_surm();
  surm_ = value;
  // @@protoc_insertion_point(field_set:mrdp.ScreenUpdateReportModeReq.surm)
}

// -------------------------------------------------------------------

// Request

// required uint32 clientID = 1;
inline bool Request::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_clientid() {
  clientid_ = 0u;
  clear_has_clientid();
}
inline ::google::protobuf::uint32 Request::clientid() const {
  // @@protoc_insertion_point(field_get:mrdp.Request.clientID)
  return clientid_;
}
inline void Request::set_clientid(::google::protobuf::uint32 value) {
  set_has_clientid();
  clientid_ = value;
  // @@protoc_insertion_point(field_set:mrdp.Request.clientID)
}

// optional .mrdp.NegotiateReq negoReq = 2;
inline bool Request::has_negoreq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_negoreq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_negoreq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_negoreq() {
  if (negoreq_ != NULL) negoreq_->::mrdp::NegotiateReq::Clear();
  clear_has_negoreq();
}
inline const ::mrdp::NegotiateReq& Request::negoreq() const {
  // @@protoc_insertion_point(field_get:mrdp.Request.negoReq)
  return negoreq_ != NULL ? *negoreq_ : *default_instance_->negoreq_;
}
inline ::mrdp::NegotiateReq* Request::mutable_negoreq() {
  set_has_negoreq();
  if (negoreq_ == NULL) negoreq_ = new ::mrdp::NegotiateReq;
  // @@protoc_insertion_point(field_mutable:mrdp.Request.negoReq)
  return negoreq_;
}
inline ::mrdp::NegotiateReq* Request::release_negoreq() {
  clear_has_negoreq();
  ::mrdp::NegotiateReq* temp = negoreq_;
  negoreq_ = NULL;
  return temp;
}
inline void Request::set_allocated_negoreq(::mrdp::NegotiateReq* negoreq) {
  delete negoreq_;
  negoreq_ = negoreq;
  if (negoreq) {
    set_has_negoreq();
  } else {
    clear_has_negoreq();
  }
  // @@protoc_insertion_point(field_set_allocated:mrdp.Request.negoReq)
}

// optional .mrdp.CloseReq closeReq = 3;
inline bool Request::has_closereq() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_closereq() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_closereq() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_closereq() {
  if (closereq_ != NULL) closereq_->::mrdp::CloseReq::Clear();
  clear_has_closereq();
}
inline const ::mrdp::CloseReq& Request::closereq() const {
  // @@protoc_insertion_point(field_get:mrdp.Request.closeReq)
  return closereq_ != NULL ? *closereq_ : *default_instance_->closereq_;
}
inline ::mrdp::CloseReq* Request::mutable_closereq() {
  set_has_closereq();
  if (closereq_ == NULL) closereq_ = new ::mrdp::CloseReq;
  // @@protoc_insertion_point(field_mutable:mrdp.Request.closeReq)
  return closereq_;
}
inline ::mrdp::CloseReq* Request::release_closereq() {
  clear_has_closereq();
  ::mrdp::CloseReq* temp = closereq_;
  closereq_ = NULL;
  return temp;
}
inline void Request::set_allocated_closereq(::mrdp::CloseReq* closereq) {
  delete closereq_;
  closereq_ = closereq;
  if (closereq) {
    set_has_closereq();
  } else {
    clear_has_closereq();
  }
  // @@protoc_insertion_point(field_set_allocated:mrdp.Request.closeReq)
}

// optional .mrdp.MotionActionReq maReq = 4;
inline bool Request::has_mareq() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Request::set_has_mareq() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Request::clear_has_mareq() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Request::clear_mareq() {
  if (mareq_ != NULL) mareq_->::mrdp::MotionActionReq::Clear();
  clear_has_mareq();
}
inline const ::mrdp::MotionActionReq& Request::mareq() const {
  // @@protoc_insertion_point(field_get:mrdp.Request.maReq)
  return mareq_ != NULL ? *mareq_ : *default_instance_->mareq_;
}
inline ::mrdp::MotionActionReq* Request::mutable_mareq() {
  set_has_mareq();
  if (mareq_ == NULL) mareq_ = new ::mrdp::MotionActionReq;
  // @@protoc_insertion_point(field_mutable:mrdp.Request.maReq)
  return mareq_;
}
inline ::mrdp::MotionActionReq* Request::release_mareq() {
  clear_has_mareq();
  ::mrdp::MotionActionReq* temp = mareq_;
  mareq_ = NULL;
  return temp;
}
inline void Request::set_allocated_mareq(::mrdp::MotionActionReq* mareq) {
  delete mareq_;
  mareq_ = mareq;
  if (mareq) {
    set_has_mareq();
  } else {
    clear_has_mareq();
  }
  // @@protoc_insertion_point(field_set_allocated:mrdp.Request.maReq)
}

// optional .mrdp.ButtonActionReq baReq = 5;
inline bool Request::has_bareq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Request::set_has_bareq() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Request::clear_has_bareq() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Request::clear_bareq() {
  if (bareq_ != NULL) bareq_->::mrdp::ButtonActionReq::Clear();
  clear_has_bareq();
}
inline const ::mrdp::ButtonActionReq& Request::bareq() const {
  // @@protoc_insertion_point(field_get:mrdp.Request.baReq)
  return bareq_ != NULL ? *bareq_ : *default_instance_->bareq_;
}
inline ::mrdp::ButtonActionReq* Request::mutable_bareq() {
  set_has_bareq();
  if (bareq_ == NULL) bareq_ = new ::mrdp::ButtonActionReq;
  // @@protoc_insertion_point(field_mutable:mrdp.Request.baReq)
  return bareq_;
}
inline ::mrdp::ButtonActionReq* Request::release_bareq() {
  clear_has_bareq();
  ::mrdp::ButtonActionReq* temp = bareq_;
  bareq_ = NULL;
  return temp;
}
inline void Request::set_allocated_bareq(::mrdp::ButtonActionReq* bareq) {
  delete bareq_;
  bareq_ = bareq;
  if (bareq) {
    set_has_bareq();
  } else {
    clear_has_bareq();
  }
  // @@protoc_insertion_point(field_set_allocated:mrdp.Request.baReq)
}

// optional .mrdp.KeyActionReq kaReq = 6;
inline bool Request::has_kareq() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Request::set_has_kareq() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Request::clear_has_kareq() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Request::clear_kareq() {
  if (kareq_ != NULL) kareq_->::mrdp::KeyActionReq::Clear();
  clear_has_kareq();
}
inline const ::mrdp::KeyActionReq& Request::kareq() const {
  // @@protoc_insertion_point(field_get:mrdp.Request.kaReq)
  return kareq_ != NULL ? *kareq_ : *default_instance_->kareq_;
}
inline ::mrdp::KeyActionReq* Request::mutable_kareq() {
  set_has_kareq();
  if (kareq_ == NULL) kareq_ = new ::mrdp::KeyActionReq;
  // @@protoc_insertion_point(field_mutable:mrdp.Request.kaReq)
  return kareq_;
}
inline ::mrdp::KeyActionReq* Request::release_kareq() {
  clear_has_kareq();
  ::mrdp::KeyActionReq* temp = kareq_;
  kareq_ = NULL;
  return temp;
}
inline void Request::set_allocated_kareq(::mrdp::KeyActionReq* kareq) {
  delete kareq_;
  kareq_ = kareq;
  if (kareq) {
    set_has_kareq();
  } else {
    clear_has_kareq();
  }
  // @@protoc_insertion_point(field_set_allocated:mrdp.Request.kaReq)
}

// optional .mrdp.ScreenUpdateReq suReq = 7;
inline bool Request::has_sureq() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Request::set_has_sureq() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Request::clear_has_sureq() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Request::clear_sureq() {
  if (sureq_ != NULL) sureq_->::mrdp::ScreenUpdateReq::Clear();
  clear_has_sureq();
}
inline const ::mrdp::ScreenUpdateReq& Request::sureq() const {
  // @@protoc_insertion_point(field_get:mrdp.Request.suReq)
  return sureq_ != NULL ? *sureq_ : *default_instance_->sureq_;
}
inline ::mrdp::ScreenUpdateReq* Request::mutable_sureq() {
  set_has_sureq();
  if (sureq_ == NULL) sureq_ = new ::mrdp::ScreenUpdateReq;
  // @@protoc_insertion_point(field_mutable:mrdp.Request.suReq)
  return sureq_;
}
inline ::mrdp::ScreenUpdateReq* Request::release_sureq() {
  clear_has_sureq();
  ::mrdp::ScreenUpdateReq* temp = sureq_;
  sureq_ = NULL;
  return temp;
}
inline void Request::set_allocated_sureq(::mrdp::ScreenUpdateReq* sureq) {
  delete sureq_;
  sureq_ = sureq;
  if (sureq) {
    set_has_sureq();
  } else {
    clear_has_sureq();
  }
  // @@protoc_insertion_point(field_set_allocated:mrdp.Request.suReq)
}

// optional .mrdp.ScreenUpdateReportModeReq surmReq = 8;
inline bool Request::has_surmreq() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Request::set_has_surmreq() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Request::clear_has_surmreq() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Request::clear_surmreq() {
  if (surmreq_ != NULL) surmreq_->::mrdp::ScreenUpdateReportModeReq::Clear();
  clear_has_surmreq();
}
inline const ::mrdp::ScreenUpdateReportModeReq& Request::surmreq() const {
  // @@protoc_insertion_point(field_get:mrdp.Request.surmReq)
  return surmreq_ != NULL ? *surmreq_ : *default_instance_->surmreq_;
}
inline ::mrdp::ScreenUpdateReportModeReq* Request::mutable_surmreq() {
  set_has_surmreq();
  if (surmreq_ == NULL) surmreq_ = new ::mrdp::ScreenUpdateReportModeReq;
  // @@protoc_insertion_point(field_mutable:mrdp.Request.surmReq)
  return surmreq_;
}
inline ::mrdp::ScreenUpdateReportModeReq* Request::release_surmreq() {
  clear_has_surmreq();
  ::mrdp::ScreenUpdateReportModeReq* temp = surmreq_;
  surmreq_ = NULL;
  return temp;
}
inline void Request::set_allocated_surmreq(::mrdp::ScreenUpdateReportModeReq* surmreq) {
  delete surmreq_;
  surmreq_ = surmreq;
  if (surmreq) {
    set_has_surmreq();
  } else {
    clear_has_surmreq();
  }
  // @@protoc_insertion_point(field_set_allocated:mrdp.Request.surmReq)
}

// -------------------------------------------------------------------

// NegotiateResp

// required .mrdp.ProtocolVersion serverVersion = 1 [default = PROTOVER_CURRENT];
inline bool NegotiateResp::has_serverversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NegotiateResp::set_has_serverversion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NegotiateResp::clear_has_serverversion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NegotiateResp::clear_serverversion() {
  serverversion_ = 65536;
  clear_has_serverversion();
}
inline ::mrdp::ProtocolVersion NegotiateResp::serverversion() const {
  // @@protoc_insertion_point(field_get:mrdp.NegotiateResp.serverVersion)
  return static_cast< ::mrdp::ProtocolVersion >(serverversion_);
}
inline void NegotiateResp::set_serverversion(::mrdp::ProtocolVersion value) {
  assert(::mrdp::ProtocolVersion_IsValid(value));
  set_has_serverversion();
  serverversion_ = value;
  // @@protoc_insertion_point(field_set:mrdp.NegotiateResp.serverVersion)
}

// required .mrdp.Format format = 2;
inline bool NegotiateResp::has_format() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NegotiateResp::set_has_format() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NegotiateResp::clear_has_format() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NegotiateResp::clear_format() {
  format_ = 0;
  clear_has_format();
}
inline ::mrdp::Format NegotiateResp::format() const {
  // @@protoc_insertion_point(field_get:mrdp.NegotiateResp.format)
  return static_cast< ::mrdp::Format >(format_);
}
inline void NegotiateResp::set_format(::mrdp::Format value) {
  assert(::mrdp::Format_IsValid(value));
  set_has_format();
  format_ = value;
  // @@protoc_insertion_point(field_set:mrdp.NegotiateResp.format)
}

// required .mrdp.Switch pixelInBigEndian = 3;
inline bool NegotiateResp::has_pixelinbigendian() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NegotiateResp::set_has_pixelinbigendian() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NegotiateResp::clear_has_pixelinbigendian() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NegotiateResp::clear_pixelinbigendian() {
  pixelinbigendian_ = 0;
  clear_has_pixelinbigendian();
}
inline ::mrdp::Switch NegotiateResp::pixelinbigendian() const {
  // @@protoc_insertion_point(field_get:mrdp.NegotiateResp.pixelInBigEndian)
  return static_cast< ::mrdp::Switch >(pixelinbigendian_);
}
inline void NegotiateResp::set_pixelinbigendian(::mrdp::Switch value) {
  assert(::mrdp::Switch_IsValid(value));
  set_has_pixelinbigendian();
  pixelinbigendian_ = value;
  // @@protoc_insertion_point(field_set:mrdp.NegotiateResp.pixelInBigEndian)
}

// required .mrdp.Rect screenRect = 4;
inline bool NegotiateResp::has_screenrect() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NegotiateResp::set_has_screenrect() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NegotiateResp::clear_has_screenrect() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NegotiateResp::clear_screenrect() {
  if (screenrect_ != NULL) screenrect_->::mrdp::Rect::Clear();
  clear_has_screenrect();
}
inline const ::mrdp::Rect& NegotiateResp::screenrect() const {
  // @@protoc_insertion_point(field_get:mrdp.NegotiateResp.screenRect)
  return screenrect_ != NULL ? *screenrect_ : *default_instance_->screenrect_;
}
inline ::mrdp::Rect* NegotiateResp::mutable_screenrect() {
  set_has_screenrect();
  if (screenrect_ == NULL) screenrect_ = new ::mrdp::Rect;
  // @@protoc_insertion_point(field_mutable:mrdp.NegotiateResp.screenRect)
  return screenrect_;
}
inline ::mrdp::Rect* NegotiateResp::release_screenrect() {
  clear_has_screenrect();
  ::mrdp::Rect* temp = screenrect_;
  screenrect_ = NULL;
  return temp;
}
inline void NegotiateResp::set_allocated_screenrect(::mrdp::Rect* screenrect) {
  delete screenrect_;
  screenrect_ = screenrect;
  if (screenrect) {
    set_has_screenrect();
  } else {
    clear_has_screenrect();
  }
  // @@protoc_insertion_point(field_set_allocated:mrdp.NegotiateResp.screenRect)
}

// -------------------------------------------------------------------

// CloseResp

// -------------------------------------------------------------------

// Response

// required uint32 clientID = 1;
inline bool Response::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_clientid() {
  clientid_ = 0u;
  clear_has_clientid();
}
inline ::google::protobuf::uint32 Response::clientid() const {
  // @@protoc_insertion_point(field_get:mrdp.Response.clientID)
  return clientid_;
}
inline void Response::set_clientid(::google::protobuf::uint32 value) {
  set_has_clientid();
  clientid_ = value;
  // @@protoc_insertion_point(field_set:mrdp.Response.clientID)
}

// required .mrdp.ErrorNo error = 2;
inline bool Response::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::mrdp::ErrorNo Response::error() const {
  // @@protoc_insertion_point(field_get:mrdp.Response.error)
  return static_cast< ::mrdp::ErrorNo >(error_);
}
inline void Response::set_error(::mrdp::ErrorNo value) {
  assert(::mrdp::ErrorNo_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:mrdp.Response.error)
}

// optional .mrdp.NegotiateResp negoResp = 3;
inline bool Response::has_negoresp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::set_has_negoresp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response::clear_has_negoresp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response::clear_negoresp() {
  if (negoresp_ != NULL) negoresp_->::mrdp::NegotiateResp::Clear();
  clear_has_negoresp();
}
inline const ::mrdp::NegotiateResp& Response::negoresp() const {
  // @@protoc_insertion_point(field_get:mrdp.Response.negoResp)
  return negoresp_ != NULL ? *negoresp_ : *default_instance_->negoresp_;
}
inline ::mrdp::NegotiateResp* Response::mutable_negoresp() {
  set_has_negoresp();
  if (negoresp_ == NULL) negoresp_ = new ::mrdp::NegotiateResp;
  // @@protoc_insertion_point(field_mutable:mrdp.Response.negoResp)
  return negoresp_;
}
inline ::mrdp::NegotiateResp* Response::release_negoresp() {
  clear_has_negoresp();
  ::mrdp::NegotiateResp* temp = negoresp_;
  negoresp_ = NULL;
  return temp;
}
inline void Response::set_allocated_negoresp(::mrdp::NegotiateResp* negoresp) {
  delete negoresp_;
  negoresp_ = negoresp;
  if (negoresp) {
    set_has_negoresp();
  } else {
    clear_has_negoresp();
  }
  // @@protoc_insertion_point(field_set_allocated:mrdp.Response.negoResp)
}

// optional .mrdp.CloseResp closeResp = 4;
inline bool Response::has_closeresp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Response::set_has_closeresp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Response::clear_has_closeresp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Response::clear_closeresp() {
  if (closeresp_ != NULL) closeresp_->::mrdp::CloseResp::Clear();
  clear_has_closeresp();
}
inline const ::mrdp::CloseResp& Response::closeresp() const {
  // @@protoc_insertion_point(field_get:mrdp.Response.closeResp)
  return closeresp_ != NULL ? *closeresp_ : *default_instance_->closeresp_;
}
inline ::mrdp::CloseResp* Response::mutable_closeresp() {
  set_has_closeresp();
  if (closeresp_ == NULL) closeresp_ = new ::mrdp::CloseResp;
  // @@protoc_insertion_point(field_mutable:mrdp.Response.closeResp)
  return closeresp_;
}
inline ::mrdp::CloseResp* Response::release_closeresp() {
  clear_has_closeresp();
  ::mrdp::CloseResp* temp = closeresp_;
  closeresp_ = NULL;
  return temp;
}
inline void Response::set_allocated_closeresp(::mrdp::CloseResp* closeresp) {
  delete closeresp_;
  closeresp_ = closeresp;
  if (closeresp) {
    set_has_closeresp();
  } else {
    clear_has_closeresp();
  }
  // @@protoc_insertion_point(field_set_allocated:mrdp.Response.closeResp)
}

// -------------------------------------------------------------------

// NegotiateEvt

// required .mrdp.ProtocolVersion serverVersion = 1 [default = PROTOVER_CURRENT];
inline bool NegotiateEvt::has_serverversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NegotiateEvt::set_has_serverversion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NegotiateEvt::clear_has_serverversion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NegotiateEvt::clear_serverversion() {
  serverversion_ = 65536;
  clear_has_serverversion();
}
inline ::mrdp::ProtocolVersion NegotiateEvt::serverversion() const {
  // @@protoc_insertion_point(field_get:mrdp.NegotiateEvt.serverVersion)
  return static_cast< ::mrdp::ProtocolVersion >(serverversion_);
}
inline void NegotiateEvt::set_serverversion(::mrdp::ProtocolVersion value) {
  assert(::mrdp::ProtocolVersion_IsValid(value));
  set_has_serverversion();
  serverversion_ = value;
  // @@protoc_insertion_point(field_set:mrdp.NegotiateEvt.serverVersion)
}

// required .mrdp.Switch compressPixelSuggestion = 2;
inline bool NegotiateEvt::has_compresspixelsuggestion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NegotiateEvt::set_has_compresspixelsuggestion() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NegotiateEvt::clear_has_compresspixelsuggestion() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NegotiateEvt::clear_compresspixelsuggestion() {
  compresspixelsuggestion_ = 0;
  clear_has_compresspixelsuggestion();
}
inline ::mrdp::Switch NegotiateEvt::compresspixelsuggestion() const {
  // @@protoc_insertion_point(field_get:mrdp.NegotiateEvt.compressPixelSuggestion)
  return static_cast< ::mrdp::Switch >(compresspixelsuggestion_);
}
inline void NegotiateEvt::set_compresspixelsuggestion(::mrdp::Switch value) {
  assert(::mrdp::Switch_IsValid(value));
  set_has_compresspixelsuggestion();
  compresspixelsuggestion_ = value;
  // @@protoc_insertion_point(field_set:mrdp.NegotiateEvt.compressPixelSuggestion)
}

// required .mrdp.ScreenUpdateReportMode surm = 3;
inline bool NegotiateEvt::has_surm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NegotiateEvt::set_has_surm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NegotiateEvt::clear_has_surm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NegotiateEvt::clear_surm() {
  surm_ = 0;
  clear_has_surm();
}
inline ::mrdp::ScreenUpdateReportMode NegotiateEvt::surm() const {
  // @@protoc_insertion_point(field_get:mrdp.NegotiateEvt.surm)
  return static_cast< ::mrdp::ScreenUpdateReportMode >(surm_);
}
inline void NegotiateEvt::set_surm(::mrdp::ScreenUpdateReportMode value) {
  assert(::mrdp::ScreenUpdateReportMode_IsValid(value));
  set_has_surm();
  surm_ = value;
  // @@protoc_insertion_point(field_set:mrdp.NegotiateEvt.surm)
}

// -------------------------------------------------------------------

// ScreenUpdatedEvt

// repeated .mrdp.Rect dirtyRegion = 1;
inline int ScreenUpdatedEvt::dirtyregion_size() const {
  return dirtyregion_.size();
}
inline void ScreenUpdatedEvt::clear_dirtyregion() {
  dirtyregion_.Clear();
}
inline const ::mrdp::Rect& ScreenUpdatedEvt::dirtyregion(int index) const {
  // @@protoc_insertion_point(field_get:mrdp.ScreenUpdatedEvt.dirtyRegion)
  return dirtyregion_.Get(index);
}
inline ::mrdp::Rect* ScreenUpdatedEvt::mutable_dirtyregion(int index) {
  // @@protoc_insertion_point(field_mutable:mrdp.ScreenUpdatedEvt.dirtyRegion)
  return dirtyregion_.Mutable(index);
}
inline ::mrdp::Rect* ScreenUpdatedEvt::add_dirtyregion() {
  // @@protoc_insertion_point(field_add:mrdp.ScreenUpdatedEvt.dirtyRegion)
  return dirtyregion_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mrdp::Rect >&
ScreenUpdatedEvt::dirtyregion() const {
  // @@protoc_insertion_point(field_list:mrdp.ScreenUpdatedEvt.dirtyRegion)
  return dirtyregion_;
}
inline ::google::protobuf::RepeatedPtrField< ::mrdp::Rect >*
ScreenUpdatedEvt::mutable_dirtyregion() {
  // @@protoc_insertion_point(field_mutable_list:mrdp.ScreenUpdatedEvt.dirtyRegion)
  return &dirtyregion_;
}

// optional bytes dirtyPixels = 2;
inline bool ScreenUpdatedEvt::has_dirtypixels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScreenUpdatedEvt::set_has_dirtypixels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScreenUpdatedEvt::clear_has_dirtypixels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScreenUpdatedEvt::clear_dirtypixels() {
  if (dirtypixels_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dirtypixels_->clear();
  }
  clear_has_dirtypixels();
}
inline const ::std::string& ScreenUpdatedEvt::dirtypixels() const {
  // @@protoc_insertion_point(field_get:mrdp.ScreenUpdatedEvt.dirtyPixels)
  return *dirtypixels_;
}
inline void ScreenUpdatedEvt::set_dirtypixels(const ::std::string& value) {
  set_has_dirtypixels();
  if (dirtypixels_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dirtypixels_ = new ::std::string;
  }
  dirtypixels_->assign(value);
  // @@protoc_insertion_point(field_set:mrdp.ScreenUpdatedEvt.dirtyPixels)
}
inline void ScreenUpdatedEvt::set_dirtypixels(const char* value) {
  set_has_dirtypixels();
  if (dirtypixels_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dirtypixels_ = new ::std::string;
  }
  dirtypixels_->assign(value);
  // @@protoc_insertion_point(field_set_char:mrdp.ScreenUpdatedEvt.dirtyPixels)
}
inline void ScreenUpdatedEvt::set_dirtypixels(const void* value, size_t size) {
  set_has_dirtypixels();
  if (dirtypixels_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dirtypixels_ = new ::std::string;
  }
  dirtypixels_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mrdp.ScreenUpdatedEvt.dirtyPixels)
}
inline ::std::string* ScreenUpdatedEvt::mutable_dirtypixels() {
  set_has_dirtypixels();
  if (dirtypixels_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dirtypixels_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mrdp.ScreenUpdatedEvt.dirtyPixels)
  return dirtypixels_;
}
inline ::std::string* ScreenUpdatedEvt::release_dirtypixels() {
  clear_has_dirtypixels();
  if (dirtypixels_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dirtypixels_;
    dirtypixels_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ScreenUpdatedEvt::set_allocated_dirtypixels(::std::string* dirtypixels) {
  if (dirtypixels_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dirtypixels_;
  }
  if (dirtypixels) {
    set_has_dirtypixels();
    dirtypixels_ = dirtypixels;
  } else {
    clear_has_dirtypixels();
    dirtypixels_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mrdp.ScreenUpdatedEvt.dirtyPixels)
}

// -------------------------------------------------------------------

// ScreenResizedEvt

// required .mrdp.Rect screenRect = 1;
inline bool ScreenResizedEvt::has_screenrect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScreenResizedEvt::set_has_screenrect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScreenResizedEvt::clear_has_screenrect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScreenResizedEvt::clear_screenrect() {
  if (screenrect_ != NULL) screenrect_->::mrdp::Rect::Clear();
  clear_has_screenrect();
}
inline const ::mrdp::Rect& ScreenResizedEvt::screenrect() const {
  // @@protoc_insertion_point(field_get:mrdp.ScreenResizedEvt.screenRect)
  return screenrect_ != NULL ? *screenrect_ : *default_instance_->screenrect_;
}
inline ::mrdp::Rect* ScreenResizedEvt::mutable_screenrect() {
  set_has_screenrect();
  if (screenrect_ == NULL) screenrect_ = new ::mrdp::Rect;
  // @@protoc_insertion_point(field_mutable:mrdp.ScreenResizedEvt.screenRect)
  return screenrect_;
}
inline ::mrdp::Rect* ScreenResizedEvt::release_screenrect() {
  clear_has_screenrect();
  ::mrdp::Rect* temp = screenrect_;
  screenrect_ = NULL;
  return temp;
}
inline void ScreenResizedEvt::set_allocated_screenrect(::mrdp::Rect* screenrect) {
  delete screenrect_;
  screenrect_ = screenrect;
  if (screenrect) {
    set_has_screenrect();
  } else {
    clear_has_screenrect();
  }
  // @@protoc_insertion_point(field_set_allocated:mrdp.ScreenResizedEvt.screenRect)
}

// -------------------------------------------------------------------

// ServerShutdownEvt

// -------------------------------------------------------------------

// Event

// required uint32 clientID = 1;
inline bool Event::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event::clear_clientid() {
  clientid_ = 0u;
  clear_has_clientid();
}
inline ::google::protobuf::uint32 Event::clientid() const {
  // @@protoc_insertion_point(field_get:mrdp.Event.clientID)
  return clientid_;
}
inline void Event::set_clientid(::google::protobuf::uint32 value) {
  set_has_clientid();
  clientid_ = value;
  // @@protoc_insertion_point(field_set:mrdp.Event.clientID)
}

// optional .mrdp.NegotiateEvt negoEvt = 2;
inline bool Event::has_negoevt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event::set_has_negoevt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event::clear_has_negoevt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event::clear_negoevt() {
  if (negoevt_ != NULL) negoevt_->::mrdp::NegotiateEvt::Clear();
  clear_has_negoevt();
}
inline const ::mrdp::NegotiateEvt& Event::negoevt() const {
  // @@protoc_insertion_point(field_get:mrdp.Event.negoEvt)
  return negoevt_ != NULL ? *negoevt_ : *default_instance_->negoevt_;
}
inline ::mrdp::NegotiateEvt* Event::mutable_negoevt() {
  set_has_negoevt();
  if (negoevt_ == NULL) negoevt_ = new ::mrdp::NegotiateEvt;
  // @@protoc_insertion_point(field_mutable:mrdp.Event.negoEvt)
  return negoevt_;
}
inline ::mrdp::NegotiateEvt* Event::release_negoevt() {
  clear_has_negoevt();
  ::mrdp::NegotiateEvt* temp = negoevt_;
  negoevt_ = NULL;
  return temp;
}
inline void Event::set_allocated_negoevt(::mrdp::NegotiateEvt* negoevt) {
  delete negoevt_;
  negoevt_ = negoevt;
  if (negoevt) {
    set_has_negoevt();
  } else {
    clear_has_negoevt();
  }
  // @@protoc_insertion_point(field_set_allocated:mrdp.Event.negoEvt)
}

// optional .mrdp.ScreenUpdatedEvt suEvt = 3;
inline bool Event::has_suevt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event::set_has_suevt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event::clear_has_suevt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event::clear_suevt() {
  if (suevt_ != NULL) suevt_->::mrdp::ScreenUpdatedEvt::Clear();
  clear_has_suevt();
}
inline const ::mrdp::ScreenUpdatedEvt& Event::suevt() const {
  // @@protoc_insertion_point(field_get:mrdp.Event.suEvt)
  return suevt_ != NULL ? *suevt_ : *default_instance_->suevt_;
}
inline ::mrdp::ScreenUpdatedEvt* Event::mutable_suevt() {
  set_has_suevt();
  if (suevt_ == NULL) suevt_ = new ::mrdp::ScreenUpdatedEvt;
  // @@protoc_insertion_point(field_mutable:mrdp.Event.suEvt)
  return suevt_;
}
inline ::mrdp::ScreenUpdatedEvt* Event::release_suevt() {
  clear_has_suevt();
  ::mrdp::ScreenUpdatedEvt* temp = suevt_;
  suevt_ = NULL;
  return temp;
}
inline void Event::set_allocated_suevt(::mrdp::ScreenUpdatedEvt* suevt) {
  delete suevt_;
  suevt_ = suevt;
  if (suevt) {
    set_has_suevt();
  } else {
    clear_has_suevt();
  }
  // @@protoc_insertion_point(field_set_allocated:mrdp.Event.suEvt)
}

// optional .mrdp.ScreenResizedEvt srEvt = 4;
inline bool Event::has_srevt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Event::set_has_srevt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Event::clear_has_srevt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Event::clear_srevt() {
  if (srevt_ != NULL) srevt_->::mrdp::ScreenResizedEvt::Clear();
  clear_has_srevt();
}
inline const ::mrdp::ScreenResizedEvt& Event::srevt() const {
  // @@protoc_insertion_point(field_get:mrdp.Event.srEvt)
  return srevt_ != NULL ? *srevt_ : *default_instance_->srevt_;
}
inline ::mrdp::ScreenResizedEvt* Event::mutable_srevt() {
  set_has_srevt();
  if (srevt_ == NULL) srevt_ = new ::mrdp::ScreenResizedEvt;
  // @@protoc_insertion_point(field_mutable:mrdp.Event.srEvt)
  return srevt_;
}
inline ::mrdp::ScreenResizedEvt* Event::release_srevt() {
  clear_has_srevt();
  ::mrdp::ScreenResizedEvt* temp = srevt_;
  srevt_ = NULL;
  return temp;
}
inline void Event::set_allocated_srevt(::mrdp::ScreenResizedEvt* srevt) {
  delete srevt_;
  srevt_ = srevt;
  if (srevt) {
    set_has_srevt();
  } else {
    clear_has_srevt();
  }
  // @@protoc_insertion_point(field_set_allocated:mrdp.Event.srEvt)
}

// optional .mrdp.ServerShutdownEvt ssEvt = 5;
inline bool Event::has_ssevt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Event::set_has_ssevt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Event::clear_has_ssevt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Event::clear_ssevt() {
  if (ssevt_ != NULL) ssevt_->::mrdp::ServerShutdownEvt::Clear();
  clear_has_ssevt();
}
inline const ::mrdp::ServerShutdownEvt& Event::ssevt() const {
  // @@protoc_insertion_point(field_get:mrdp.Event.ssEvt)
  return ssevt_ != NULL ? *ssevt_ : *default_instance_->ssevt_;
}
inline ::mrdp::ServerShutdownEvt* Event::mutable_ssevt() {
  set_has_ssevt();
  if (ssevt_ == NULL) ssevt_ = new ::mrdp::ServerShutdownEvt;
  // @@protoc_insertion_point(field_mutable:mrdp.Event.ssEvt)
  return ssevt_;
}
inline ::mrdp::ServerShutdownEvt* Event::release_ssevt() {
  clear_has_ssevt();
  ::mrdp::ServerShutdownEvt* temp = ssevt_;
  ssevt_ = NULL;
  return temp;
}
inline void Event::set_allocated_ssevt(::mrdp::ServerShutdownEvt* ssevt) {
  delete ssevt_;
  ssevt_ = ssevt;
  if (ssevt) {
    set_has_ssevt();
  } else {
    clear_has_ssevt();
  }
  // @@protoc_insertion_point(field_set_allocated:mrdp.Event.ssEvt)
}

// -------------------------------------------------------------------

// Message

// required .mrdp.MSG_ID id = 1;
inline bool Message::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::mrdp::MSG_ID Message::id() const {
  // @@protoc_insertion_point(field_get:mrdp.Message.id)
  return static_cast< ::mrdp::MSG_ID >(id_);
}
inline void Message::set_id(::mrdp::MSG_ID value) {
  assert(::mrdp::MSG_ID_IsValid(value));
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:mrdp.Message.id)
}

// optional .mrdp.Request req = 2;
inline bool Message::has_req() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_req() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_req() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_req() {
  if (req_ != NULL) req_->::mrdp::Request::Clear();
  clear_has_req();
}
inline const ::mrdp::Request& Message::req() const {
  // @@protoc_insertion_point(field_get:mrdp.Message.req)
  return req_ != NULL ? *req_ : *default_instance_->req_;
}
inline ::mrdp::Request* Message::mutable_req() {
  set_has_req();
  if (req_ == NULL) req_ = new ::mrdp::Request;
  // @@protoc_insertion_point(field_mutable:mrdp.Message.req)
  return req_;
}
inline ::mrdp::Request* Message::release_req() {
  clear_has_req();
  ::mrdp::Request* temp = req_;
  req_ = NULL;
  return temp;
}
inline void Message::set_allocated_req(::mrdp::Request* req) {
  delete req_;
  req_ = req;
  if (req) {
    set_has_req();
  } else {
    clear_has_req();
  }
  // @@protoc_insertion_point(field_set_allocated:mrdp.Message.req)
}

// optional .mrdp.Response resp = 3;
inline bool Message::has_resp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message::set_has_resp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message::clear_has_resp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message::clear_resp() {
  if (resp_ != NULL) resp_->::mrdp::Response::Clear();
  clear_has_resp();
}
inline const ::mrdp::Response& Message::resp() const {
  // @@protoc_insertion_point(field_get:mrdp.Message.resp)
  return resp_ != NULL ? *resp_ : *default_instance_->resp_;
}
inline ::mrdp::Response* Message::mutable_resp() {
  set_has_resp();
  if (resp_ == NULL) resp_ = new ::mrdp::Response;
  // @@protoc_insertion_point(field_mutable:mrdp.Message.resp)
  return resp_;
}
inline ::mrdp::Response* Message::release_resp() {
  clear_has_resp();
  ::mrdp::Response* temp = resp_;
  resp_ = NULL;
  return temp;
}
inline void Message::set_allocated_resp(::mrdp::Response* resp) {
  delete resp_;
  resp_ = resp;
  if (resp) {
    set_has_resp();
  } else {
    clear_has_resp();
  }
  // @@protoc_insertion_point(field_set_allocated:mrdp.Message.resp)
}

// optional .mrdp.Event evt = 4;
inline bool Message::has_evt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Message::set_has_evt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Message::clear_has_evt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Message::clear_evt() {
  if (evt_ != NULL) evt_->::mrdp::Event::Clear();
  clear_has_evt();
}
inline const ::mrdp::Event& Message::evt() const {
  // @@protoc_insertion_point(field_get:mrdp.Message.evt)
  return evt_ != NULL ? *evt_ : *default_instance_->evt_;
}
inline ::mrdp::Event* Message::mutable_evt() {
  set_has_evt();
  if (evt_ == NULL) evt_ = new ::mrdp::Event;
  // @@protoc_insertion_point(field_mutable:mrdp.Message.evt)
  return evt_;
}
inline ::mrdp::Event* Message::release_evt() {
  clear_has_evt();
  ::mrdp::Event* temp = evt_;
  evt_ = NULL;
  return temp;
}
inline void Message::set_allocated_evt(::mrdp::Event* evt) {
  delete evt_;
  evt_ = evt;
  if (evt) {
    set_has_evt();
  } else {
    clear_has_evt();
  }
  // @@protoc_insertion_point(field_set_allocated:mrdp.Message.evt)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mrdp

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::mrdp::ProtocolVersion> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mrdp::ProtocolVersion>() {
  return ::mrdp::ProtocolVersion_descriptor();
}
template <> struct is_proto_enum< ::mrdp::Switch> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mrdp::Switch>() {
  return ::mrdp::Switch_descriptor();
}
template <> struct is_proto_enum< ::mrdp::ScreenUpdateReportMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mrdp::ScreenUpdateReportMode>() {
  return ::mrdp::ScreenUpdateReportMode_descriptor();
}
template <> struct is_proto_enum< ::mrdp::ScreenUpdateMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mrdp::ScreenUpdateMode>() {
  return ::mrdp::ScreenUpdateMode_descriptor();
}
template <> struct is_proto_enum< ::mrdp::ErrorNo> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mrdp::ErrorNo>() {
  return ::mrdp::ErrorNo_descriptor();
}
template <> struct is_proto_enum< ::mrdp::Format> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mrdp::Format>() {
  return ::mrdp::Format_descriptor();
}
template <> struct is_proto_enum< ::mrdp::MSG_ID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mrdp::MSG_ID>() {
  return ::mrdp::MSG_ID_descriptor();
}
template <> struct is_proto_enum< ::mrdp::ButtonActionPress> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mrdp::ButtonActionPress>() {
  return ::mrdp::ButtonActionPress_descriptor();
}
template <> struct is_proto_enum< ::mrdp::KeyActionDown> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mrdp::KeyActionDown>() {
  return ::mrdp::KeyActionDown_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mrdp_2eproto__INCLUDED
