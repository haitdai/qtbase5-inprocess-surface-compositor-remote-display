1. 编译 qt
1.1 [qt for windows]
依赖： Perl, Python, VS2010, 编译环境为 windows7 或更高
step1, 打开VS2010的命令行窗口；
step2, 进入qtbase目录；
step3, configure -debug -opengl desktop -no-angle -nomake examples -nomake tests
step4, nmake
若使用静态编译，第3步替换为：
configure -debug -static -opengl desktop -no-angle -nomake examples -nomake tests
若要clean，在qtbase目录下，运行：
nmake -f Makefile clean
ref. qtbase_win.bat
本配置被 CMS2 使用

1.2 [qt for armlinux]
依赖: toolchain 为 codesourcery arm-2009q1, 编译环境为 ubuntu12.04LTS
step1, cd <qt build dir>
           QT_SRC_PATH=<qt src dir> QT_SHIPPING_PATH=<qt shipping dir> QT_SHIPPING_TYPE=[release | debug] ADDITIONAL_OPTS=  <qt src dir>/qtbase_am335x.sh 2>&1 | tee build.log
step2, cd  <qt shipping dir>/
           tar zcvf qt-5.2-bigdipper-${QT_SHIPPING_TYPE}-${QT_STATIC_SHARED}.tar.gz  qt-5.2-bigdipper-release-${QT_STATIC_SHARED}
注意: 
由于接口的不同(DBvs.BD), qt for armlinux 有 2 种配置: 新接口(mrofs)和老接口(mrofs_legacy), 新接口只能使用 mrofs_pvr2d, 老接口可使用 mrofs_glesv2 和 mrofs_pvr2d.
ref. qtbase_am335x.sh, qtbase_am335x_legacy.sh
qtbase_am335x.sh 被 MK 使用
qtbase_am335x_legacy.sh 被 DB 使用

1.3 [qt for x86linux]
依赖: 若手工编译, 编译环境为 ubuntu12.04LTS, 需要 yocto poky sdk; 若自动编译, 需要 yocto poky rootfs 编译环境;
step1, cd <qt build dir>
           QT_SRC_PATH=<qt src dir> QT_SHIPPING_PATH=<qt shipping dir> QT_SHIPPING_TYPE=[release | debug] ADDITIONAL_OPTS=  <qt src dir>/qtbase_baytrail.sh 2>&1 | tee build.log
step2, cd  <qt shipping dir>/
           tar zcvf qt-5.2-bigdipper-${QT_SHIPPING_TYPE}-${QT_STATIC_SHARED}.tar.gz  qt-5.2-bigdipper-release-${QT_STATIC_SHARED}
ref. qtbase_baytrail.sh
本配置被 BD 使用

2, 依赖
2.1 inputmgr
输入设备库，分 x86linux 和 armlinux 2 个版本
windows 不适用。

2.2, gsdk
由于 armlinux 版的编译环境只有toolchain，因此把qt依赖的pvr sdk放在这里。
x86linux 不适用。

2.3, yocto poky sdk
未集成, 请自行安装 poky sdk

3, 配置文件
在exe目录下增加qt.conf文件，可以指定加载plugin的路径
[Paths]
Plugins=../plugins
Prefix	QCoreApplication::applicationDirPath()
Documentation	doc
Headers	include
Libraries	lib
Binaries	bin
Plugins	plugins
Imports	imports
Data	.
Translations	translations
Settings	.
Examples	.
Demos	.
QT_QPA_PLATFORM_PLUGIN_PATH 环境变量指定加载的插件的路径，等同于qt.conf的方法

4, 说明
[qt for windows] 基于 windows, 暂未支持 opengl
[qt for x86linux] 基于 x(xrender) 的显示, 暂未支持 opengl
[qt for armlinux] 基于 pvr 的显示(oglesv2/pvr2d), 暂未支持 opengl
QT_PRINTFILE, 用 QPainter 接口处理打印数据，并转存到 mindray 格式的打印数据文件中, 似乎没有使用
DB: Dubhe
BD: Bigdipper
MK: Merak
CMS2: Central Monitoring System phase 2

[Windows]
VC_MemEx: 请把 next_mem\bin\ 下的 dll 拷贝到 PATH 路径中, 否则 qt 的  dll(以及依赖这些dll的 tool 比如uic) 都无法正确运行