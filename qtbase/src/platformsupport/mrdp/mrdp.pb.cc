// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mrdp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mrdp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mrdp {

namespace {

const ::google::protobuf::Descriptor* Rect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rect_reflection_ = NULL;
const ::google::protobuf::Descriptor* NegotiateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NegotiateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MotionActionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MotionActionReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ButtonActionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ButtonActionReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyActionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyActionReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScreenUpdateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScreenUpdateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScreenUpdateReportModeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScreenUpdateReportModeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* NegotiateResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NegotiateResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* NegotiateEvt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NegotiateEvt_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScreenUpdatedEvt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScreenUpdatedEvt_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScreenResizedEvt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScreenResizedEvt_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerShutdownEvt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerShutdownEvt_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProtocolVersion_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Switch_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ScreenUpdateReportMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ScreenUpdateMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ErrorNo_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Format_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MSG_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ButtonActionPress_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* KeyActionDown_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_mrdp_2eproto() {
  protobuf_AddDesc_mrdp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mrdp.proto");
  GOOGLE_CHECK(file != NULL);
  Rect_descriptor_ = file->message_type(0);
  static const int Rect_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, h_),
  };
  Rect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rect_descriptor_,
      Rect::default_instance_,
      Rect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rect));
  NegotiateReq_descriptor_ = file->message_type(1);
  static const int NegotiateReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NegotiateReq, clientversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NegotiateReq, compresspixels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NegotiateReq, surm_),
  };
  NegotiateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NegotiateReq_descriptor_,
      NegotiateReq::default_instance_,
      NegotiateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NegotiateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NegotiateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NegotiateReq));
  CloseReq_descriptor_ = file->message_type(2);
  static const int CloseReq_offsets_[1] = {
  };
  CloseReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CloseReq_descriptor_,
      CloseReq::default_instance_,
      CloseReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CloseReq));
  MotionActionReq_descriptor_ = file->message_type(3);
  static const int MotionActionReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionActionReq, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionActionReq, y_),
  };
  MotionActionReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MotionActionReq_descriptor_,
      MotionActionReq::default_instance_,
      MotionActionReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionActionReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionActionReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MotionActionReq));
  ButtonActionReq_descriptor_ = file->message_type(4);
  static const int ButtonActionReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonActionReq, button_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonActionReq, pressed_),
  };
  ButtonActionReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ButtonActionReq_descriptor_,
      ButtonActionReq::default_instance_,
      ButtonActionReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonActionReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ButtonActionReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ButtonActionReq));
  KeyActionReq_descriptor_ = file->message_type(5);
  static const int KeyActionReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyActionReq, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyActionReq, down_),
  };
  KeyActionReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyActionReq_descriptor_,
      KeyActionReq::default_instance_,
      KeyActionReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyActionReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyActionReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyActionReq));
  ScreenUpdateReq_descriptor_ = file->message_type(6);
  static const int ScreenUpdateReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenUpdateReq, sum_),
  };
  ScreenUpdateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScreenUpdateReq_descriptor_,
      ScreenUpdateReq::default_instance_,
      ScreenUpdateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenUpdateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenUpdateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScreenUpdateReq));
  ScreenUpdateReportModeReq_descriptor_ = file->message_type(7);
  static const int ScreenUpdateReportModeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenUpdateReportModeReq, surm_),
  };
  ScreenUpdateReportModeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScreenUpdateReportModeReq_descriptor_,
      ScreenUpdateReportModeReq::default_instance_,
      ScreenUpdateReportModeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenUpdateReportModeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenUpdateReportModeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScreenUpdateReportModeReq));
  Request_descriptor_ = file->message_type(8);
  static const int Request_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, negoreq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, closereq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, mareq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, bareq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, kareq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, sureq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, surmreq_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  NegotiateResp_descriptor_ = file->message_type(9);
  static const int NegotiateResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NegotiateResp, serverversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NegotiateResp, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NegotiateResp, pixelinbigendian_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NegotiateResp, screenrect_),
  };
  NegotiateResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NegotiateResp_descriptor_,
      NegotiateResp::default_instance_,
      NegotiateResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NegotiateResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NegotiateResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NegotiateResp));
  CloseResp_descriptor_ = file->message_type(10);
  static const int CloseResp_offsets_[1] = {
  };
  CloseResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CloseResp_descriptor_,
      CloseResp::default_instance_,
      CloseResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CloseResp));
  Response_descriptor_ = file->message_type(11);
  static const int Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, negoresp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, closeresp_),
  };
  Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response));
  NegotiateEvt_descriptor_ = file->message_type(12);
  static const int NegotiateEvt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NegotiateEvt, serverversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NegotiateEvt, compresspixelsuggestion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NegotiateEvt, surm_),
  };
  NegotiateEvt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NegotiateEvt_descriptor_,
      NegotiateEvt::default_instance_,
      NegotiateEvt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NegotiateEvt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NegotiateEvt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NegotiateEvt));
  ScreenUpdatedEvt_descriptor_ = file->message_type(13);
  static const int ScreenUpdatedEvt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenUpdatedEvt, dirtyregion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenUpdatedEvt, dirtypixels_),
  };
  ScreenUpdatedEvt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScreenUpdatedEvt_descriptor_,
      ScreenUpdatedEvt::default_instance_,
      ScreenUpdatedEvt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenUpdatedEvt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenUpdatedEvt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScreenUpdatedEvt));
  ScreenResizedEvt_descriptor_ = file->message_type(14);
  static const int ScreenResizedEvt_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenResizedEvt, screenrect_),
  };
  ScreenResizedEvt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScreenResizedEvt_descriptor_,
      ScreenResizedEvt::default_instance_,
      ScreenResizedEvt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenResizedEvt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScreenResizedEvt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScreenResizedEvt));
  ServerShutdownEvt_descriptor_ = file->message_type(15);
  static const int ServerShutdownEvt_offsets_[1] = {
  };
  ServerShutdownEvt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerShutdownEvt_descriptor_,
      ServerShutdownEvt::default_instance_,
      ServerShutdownEvt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerShutdownEvt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerShutdownEvt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerShutdownEvt));
  Event_descriptor_ = file->message_type(16);
  static const int Event_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, negoevt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, suevt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, srevt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, ssevt_),
  };
  Event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_descriptor_,
      Event::default_instance_,
      Event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event));
  Message_descriptor_ = file->message_type(17);
  static const int Message_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, resp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, evt_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
  ProtocolVersion_descriptor_ = file->enum_type(0);
  Switch_descriptor_ = file->enum_type(1);
  ScreenUpdateReportMode_descriptor_ = file->enum_type(2);
  ScreenUpdateMode_descriptor_ = file->enum_type(3);
  ErrorNo_descriptor_ = file->enum_type(4);
  Format_descriptor_ = file->enum_type(5);
  MSG_ID_descriptor_ = file->enum_type(6);
  ButtonActionPress_descriptor_ = file->enum_type(7);
  KeyActionDown_descriptor_ = file->enum_type(8);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mrdp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rect_descriptor_, &Rect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NegotiateReq_descriptor_, &NegotiateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CloseReq_descriptor_, &CloseReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MotionActionReq_descriptor_, &MotionActionReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ButtonActionReq_descriptor_, &ButtonActionReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyActionReq_descriptor_, &KeyActionReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScreenUpdateReq_descriptor_, &ScreenUpdateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScreenUpdateReportModeReq_descriptor_, &ScreenUpdateReportModeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NegotiateResp_descriptor_, &NegotiateResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CloseResp_descriptor_, &CloseResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NegotiateEvt_descriptor_, &NegotiateEvt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScreenUpdatedEvt_descriptor_, &ScreenUpdatedEvt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScreenResizedEvt_descriptor_, &ScreenResizedEvt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerShutdownEvt_descriptor_, &ServerShutdownEvt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_descriptor_, &Event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mrdp_2eproto() {
  delete Rect::default_instance_;
  delete Rect_reflection_;
  delete NegotiateReq::default_instance_;
  delete NegotiateReq_reflection_;
  delete CloseReq::default_instance_;
  delete CloseReq_reflection_;
  delete MotionActionReq::default_instance_;
  delete MotionActionReq_reflection_;
  delete ButtonActionReq::default_instance_;
  delete ButtonActionReq_reflection_;
  delete KeyActionReq::default_instance_;
  delete KeyActionReq_reflection_;
  delete ScreenUpdateReq::default_instance_;
  delete ScreenUpdateReq_reflection_;
  delete ScreenUpdateReportModeReq::default_instance_;
  delete ScreenUpdateReportModeReq_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete NegotiateResp::default_instance_;
  delete NegotiateResp_reflection_;
  delete CloseResp::default_instance_;
  delete CloseResp_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
  delete NegotiateEvt::default_instance_;
  delete NegotiateEvt_reflection_;
  delete ScreenUpdatedEvt::default_instance_;
  delete ScreenUpdatedEvt_reflection_;
  delete ScreenResizedEvt::default_instance_;
  delete ScreenResizedEvt_reflection_;
  delete ServerShutdownEvt::default_instance_;
  delete ServerShutdownEvt_reflection_;
  delete Event::default_instance_;
  delete Event_reflection_;
  delete Message::default_instance_;
  delete Message_reflection_;
}

void protobuf_AddDesc_mrdp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nmrdp.proto\022\004mrdp\"2\n\004Rect\022\t\n\001x\030\001 \002(\r\022\t\n"
    "\001y\030\002 \002(\r\022\t\n\001w\030\003 \002(\r\022\t\n\001h\030\004 \002(\r\"\240\001\n\014Negot"
    "iateReq\022>\n\rclientVersion\030\001 \002(\0162\025.mrdp.Pr"
    "otocolVersion:\020PROTOVER_CURRENT\022$\n\016compr"
    "essPixels\030\002 \002(\0162\014.mrdp.Switch\022*\n\004surm\030\003 "
    "\002(\0162\034.mrdp.ScreenUpdateReportMode\"\n\n\010Clo"
    "seReq\"\'\n\017MotionActionReq\022\t\n\001x\030\001 \002(\r\022\t\n\001y"
    "\030\002 \002(\r\"K\n\017ButtonActionReq\022\016\n\006button\030\001 \002("
    "\r\022(\n\007pressed\030\002 \002(\0162\027.mrdp.ButtonActionPr"
    "ess\">\n\014KeyActionReq\022\013\n\003key\030\001 \002(\r\022!\n\004down"
    "\030\002 \002(\0162\023.mrdp.KeyActionDown\"6\n\017ScreenUpd"
    "ateReq\022#\n\003sum\030\001 \002(\0162\026.mrdp.ScreenUpdateM"
    "ode\"G\n\031ScreenUpdateReportModeReq\022*\n\004surm"
    "\030\001 \002(\0162\034.mrdp.ScreenUpdateReportMode\"\251\002\n"
    "\007Request\022\020\n\010clientID\030\001 \002(\r\022#\n\007negoReq\030\002 "
    "\001(\0132\022.mrdp.NegotiateReq\022 \n\010closeReq\030\003 \001("
    "\0132\016.mrdp.CloseReq\022$\n\005maReq\030\004 \001(\0132\025.mrdp."
    "MotionActionReq\022$\n\005baReq\030\005 \001(\0132\025.mrdp.Bu"
    "ttonActionReq\022!\n\005kaReq\030\006 \001(\0132\022.mrdp.KeyA"
    "ctionReq\022$\n\005suReq\030\007 \001(\0132\025.mrdp.ScreenUpd"
    "ateReq\0220\n\007surmReq\030\010 \001(\0132\037.mrdp.ScreenUpd"
    "ateReportModeReq\"\265\001\n\rNegotiateResp\022>\n\rse"
    "rverVersion\030\001 \002(\0162\025.mrdp.ProtocolVersion"
    ":\020PROTOVER_CURRENT\022\034\n\006format\030\002 \002(\0162\014.mrd"
    "p.Format\022&\n\020pixelInBigEndian\030\003 \002(\0162\014.mrd"
    "p.Switch\022\036\n\nscreenRect\030\004 \002(\0132\n.mrdp.Rect"
    "\"\013\n\tCloseResp\"\205\001\n\010Response\022\020\n\010clientID\030\001"
    " \002(\r\022\034\n\005error\030\002 \002(\0162\r.mrdp.ErrorNo\022%\n\010ne"
    "goResp\030\003 \001(\0132\023.mrdp.NegotiateResp\022\"\n\tclo"
    "seResp\030\004 \001(\0132\017.mrdp.CloseResp\"\251\001\n\014Negoti"
    "ateEvt\022>\n\rserverVersion\030\001 \002(\0162\025.mrdp.Pro"
    "tocolVersion:\020PROTOVER_CURRENT\022-\n\027compre"
    "ssPixelSuggestion\030\002 \002(\0162\014.mrdp.Switch\022*\n"
    "\004surm\030\003 \002(\0162\034.mrdp.ScreenUpdateReportMod"
    "e\"H\n\020ScreenUpdatedEvt\022\037\n\013dirtyRegion\030\001 \003"
    "(\0132\n.mrdp.Rect\022\023\n\013dirtyPixels\030\002 \001(\014\"2\n\020S"
    "creenResizedEvt\022\036\n\nscreenRect\030\001 \002(\0132\n.mr"
    "dp.Rect\"\023\n\021ServerShutdownEvt\"\264\001\n\005Event\022\020"
    "\n\010clientID\030\001 \002(\r\022#\n\007negoEvt\030\002 \001(\0132\022.mrdp"
    ".NegotiateEvt\022%\n\005suEvt\030\003 \001(\0132\026.mrdp.Scre"
    "enUpdatedEvt\022%\n\005srEvt\030\004 \001(\0132\026.mrdp.Scree"
    "nResizedEvt\022&\n\005ssEvt\030\005 \001(\0132\027.mrdp.Server"
    "ShutdownEvt\"w\n\007Message\022\030\n\002id\030\001 \002(\0162\014.mrd"
    "p.MSG_ID\022\032\n\003req\030\002 \001(\0132\r.mrdp.Request\022\034\n\004"
    "resp\030\003 \001(\0132\016.mrdp.Response\022\030\n\003evt\030\004 \001(\0132"
    "\013.mrdp.Event*)\n\017ProtocolVersion\022\026\n\020PROTO"
    "VER_CURRENT\020\200\200\004*\037\n\006Switch\022\n\n\006SW_OFF\020\000\022\t\n"
    "\005SW_ON\020\001*;\n\026ScreenUpdateReportMode\022\017\n\013SU"
    "RM_ACTIVE\020\000\022\020\n\014SURM_PASSIVE\020\001*5\n\020ScreenU"
    "pdateMode\022\014\n\010SUM_FULL\020\000\022\023\n\017SUM_INCREMENT"
    "AL\020\001*r\n\007ErrorNo\022\017\n\013ERR_SUCCESS\020\000\022\027\n\023ERR_"
    "FAILURE_GENERIC\020\001\022\025\n\021ERR_NOT_SUPPORTED\020\002"
    "\022\031\n\025ERR_INVALID_PARAMETER\020\003\022\013\n\007ERR_LZO\020\004"
    "*\203\001\n\006Format\022\025\n\021FMT_ARGB32_PREMUL\020\000\022\016\n\nFM"
    "T_ARGB32\020\001\022\r\n\tFMT_RGB32\020\002\022\016\n\nFMT_xBGR32\020"
    "\003\022\016\n\nFMT_RGBA32\020\004\022\025\n\021FMT_BGRA32_PREMUL\020\005"
    "\022\014\n\010FMT_UYVY\020\006*\322\002\n\006MSG_ID\022\027\n\023REQUEST_NEG"
    "OTIATION\020\000\022\021\n\rREQUEST_CLOSE\020\001\022\030\n\024REQUEST"
    "_MOTIONACTION\020\002\022\030\n\024REQUEST_BUTTONACTION\020"
    "\003\022\025\n\021REQUEST_KEYACTION\020\004\022\030\n\024REQUEST_SCRE"
    "ENUPDATE\020\005\022\"\n\036REQUEST_SCREENUPDATEREPORT"
    "MODE\020\006\022\030\n\024RESPONSE_NEGOTIATION\020d\022\022\n\016RESP"
    "ONSE_CLOSE\020e\022\026\n\021EVENT_NEGOTIATION\020\350\007\022\030\n\023"
    "EVENT_SCREENUPDATED\020\351\007\022\030\n\023EVENT_SCREENRE"
    "SIZED\020\352\007\022\031\n\024EVENT_SERVERSHUTDOWN\020\353\007*4\n\021B"
    "uttonActionPress\022\017\n\013BA_RELEASED\020\000\022\016\n\nBA_"
    "PRESSED\020\001*\'\n\rKeyActionDown\022\t\n\005KA_UP\020\000\022\013\n"
    "\007KA_DOWN\020\001B\002H\001", 2694);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mrdp.proto", &protobuf_RegisterTypes);
  Rect::default_instance_ = new Rect();
  NegotiateReq::default_instance_ = new NegotiateReq();
  CloseReq::default_instance_ = new CloseReq();
  MotionActionReq::default_instance_ = new MotionActionReq();
  ButtonActionReq::default_instance_ = new ButtonActionReq();
  KeyActionReq::default_instance_ = new KeyActionReq();
  ScreenUpdateReq::default_instance_ = new ScreenUpdateReq();
  ScreenUpdateReportModeReq::default_instance_ = new ScreenUpdateReportModeReq();
  Request::default_instance_ = new Request();
  NegotiateResp::default_instance_ = new NegotiateResp();
  CloseResp::default_instance_ = new CloseResp();
  Response::default_instance_ = new Response();
  NegotiateEvt::default_instance_ = new NegotiateEvt();
  ScreenUpdatedEvt::default_instance_ = new ScreenUpdatedEvt();
  ScreenResizedEvt::default_instance_ = new ScreenResizedEvt();
  ServerShutdownEvt::default_instance_ = new ServerShutdownEvt();
  Event::default_instance_ = new Event();
  Message::default_instance_ = new Message();
  Rect::default_instance_->InitAsDefaultInstance();
  NegotiateReq::default_instance_->InitAsDefaultInstance();
  CloseReq::default_instance_->InitAsDefaultInstance();
  MotionActionReq::default_instance_->InitAsDefaultInstance();
  ButtonActionReq::default_instance_->InitAsDefaultInstance();
  KeyActionReq::default_instance_->InitAsDefaultInstance();
  ScreenUpdateReq::default_instance_->InitAsDefaultInstance();
  ScreenUpdateReportModeReq::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  NegotiateResp::default_instance_->InitAsDefaultInstance();
  CloseResp::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  NegotiateEvt::default_instance_->InitAsDefaultInstance();
  ScreenUpdatedEvt::default_instance_->InitAsDefaultInstance();
  ScreenResizedEvt::default_instance_->InitAsDefaultInstance();
  ServerShutdownEvt::default_instance_->InitAsDefaultInstance();
  Event::default_instance_->InitAsDefaultInstance();
  Message::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mrdp_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mrdp_2eproto {
  StaticDescriptorInitializer_mrdp_2eproto() {
    protobuf_AddDesc_mrdp_2eproto();
  }
} static_descriptor_initializer_mrdp_2eproto_;
const ::google::protobuf::EnumDescriptor* ProtocolVersion_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtocolVersion_descriptor_;
}
bool ProtocolVersion_IsValid(int value) {
  switch(value) {
    case 65536:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Switch_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Switch_descriptor_;
}
bool Switch_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ScreenUpdateReportMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScreenUpdateReportMode_descriptor_;
}
bool ScreenUpdateReportMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ScreenUpdateMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScreenUpdateMode_descriptor_;
}
bool ScreenUpdateMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ErrorNo_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorNo_descriptor_;
}
bool ErrorNo_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Format_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Format_descriptor_;
}
bool Format_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MSG_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSG_ID_descriptor_;
}
bool MSG_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 100:
    case 101:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ButtonActionPress_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ButtonActionPress_descriptor_;
}
bool ButtonActionPress_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* KeyActionDown_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyActionDown_descriptor_;
}
bool KeyActionDown_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Rect::kXFieldNumber;
const int Rect::kYFieldNumber;
const int Rect::kWFieldNumber;
const int Rect::kHFieldNumber;
#endif  // !_MSC_VER

Rect::Rect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mrdp.Rect)
}

void Rect::InitAsDefaultInstance() {
}

Rect::Rect(const Rect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mrdp.Rect)
}

void Rect::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0u;
  y_ = 0u;
  w_ = 0u;
  h_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rect::~Rect() {
  // @@protoc_insertion_point(destructor:mrdp.Rect)
  SharedDtor();
}

void Rect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Rect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rect_descriptor_;
}

const Rect& Rect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mrdp_2eproto();
  return *default_instance_;
}

Rect* Rect::default_instance_ = NULL;

Rect* Rect::New() const {
  return new Rect;
}

void Rect::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Rect*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, h_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mrdp.Rect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required uint32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_w;
        break;
      }

      // required uint32 w = 3;
      case 3: {
        if (tag == 24) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_h;
        break;
      }

      // required uint32 h = 4;
      case 4: {
        if (tag == 32) {
         parse_h:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mrdp.Rect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mrdp.Rect)
  return false;
#undef DO_
}

void Rect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mrdp.Rect)
  // required uint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // required uint32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  // required uint32 w = 3;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->w(), output);
  }

  // required uint32 h = 4;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->h(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mrdp.Rect)
}

::google::protobuf::uint8* Rect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mrdp.Rect)
  // required uint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // required uint32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  // required uint32 w = 3;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->w(), target);
  }

  // required uint32 h = 4;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->h(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mrdp.Rect)
  return target;
}

int Rect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // required uint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // required uint32 w = 3;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->w());
    }

    // required uint32 h = 4;
    if (has_h()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->h());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rect::MergeFrom(const Rect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
    if (from.has_h()) {
      set_h(from.h());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rect::CopyFrom(const Rect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rect::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Rect::Swap(Rect* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(w_, other->w_);
    std::swap(h_, other->h_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rect_descriptor_;
  metadata.reflection = Rect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NegotiateReq::kClientVersionFieldNumber;
const int NegotiateReq::kCompressPixelsFieldNumber;
const int NegotiateReq::kSurmFieldNumber;
#endif  // !_MSC_VER

NegotiateReq::NegotiateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mrdp.NegotiateReq)
}

void NegotiateReq::InitAsDefaultInstance() {
}

NegotiateReq::NegotiateReq(const NegotiateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mrdp.NegotiateReq)
}

void NegotiateReq::SharedCtor() {
  _cached_size_ = 0;
  clientversion_ = 65536;
  compresspixels_ = 0;
  surm_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NegotiateReq::~NegotiateReq() {
  // @@protoc_insertion_point(destructor:mrdp.NegotiateReq)
  SharedDtor();
}

void NegotiateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NegotiateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NegotiateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NegotiateReq_descriptor_;
}

const NegotiateReq& NegotiateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mrdp_2eproto();
  return *default_instance_;
}

NegotiateReq* NegotiateReq::default_instance_ = NULL;

NegotiateReq* NegotiateReq::New() const {
  return new NegotiateReq;
}

void NegotiateReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NegotiateReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(compresspixels_, surm_);
    clientversion_ = 65536;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NegotiateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mrdp.NegotiateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mrdp.ProtocolVersion clientVersion = 1 [default = PROTOVER_CURRENT];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mrdp::ProtocolVersion_IsValid(value)) {
            set_clientversion(static_cast< ::mrdp::ProtocolVersion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_compressPixels;
        break;
      }

      // required .mrdp.Switch compressPixels = 2;
      case 2: {
        if (tag == 16) {
         parse_compressPixels:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mrdp::Switch_IsValid(value)) {
            set_compresspixels(static_cast< ::mrdp::Switch >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_surm;
        break;
      }

      // required .mrdp.ScreenUpdateReportMode surm = 3;
      case 3: {
        if (tag == 24) {
         parse_surm:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mrdp::ScreenUpdateReportMode_IsValid(value)) {
            set_surm(static_cast< ::mrdp::ScreenUpdateReportMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mrdp.NegotiateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mrdp.NegotiateReq)
  return false;
#undef DO_
}

void NegotiateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mrdp.NegotiateReq)
  // required .mrdp.ProtocolVersion clientVersion = 1 [default = PROTOVER_CURRENT];
  if (has_clientversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->clientversion(), output);
  }

  // required .mrdp.Switch compressPixels = 2;
  if (has_compresspixels()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->compresspixels(), output);
  }

  // required .mrdp.ScreenUpdateReportMode surm = 3;
  if (has_surm()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->surm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mrdp.NegotiateReq)
}

::google::protobuf::uint8* NegotiateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mrdp.NegotiateReq)
  // required .mrdp.ProtocolVersion clientVersion = 1 [default = PROTOVER_CURRENT];
  if (has_clientversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->clientversion(), target);
  }

  // required .mrdp.Switch compressPixels = 2;
  if (has_compresspixels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->compresspixels(), target);
  }

  // required .mrdp.ScreenUpdateReportMode surm = 3;
  if (has_surm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->surm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mrdp.NegotiateReq)
  return target;
}

int NegotiateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mrdp.ProtocolVersion clientVersion = 1 [default = PROTOVER_CURRENT];
    if (has_clientversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->clientversion());
    }

    // required .mrdp.Switch compressPixels = 2;
    if (has_compresspixels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->compresspixels());
    }

    // required .mrdp.ScreenUpdateReportMode surm = 3;
    if (has_surm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->surm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NegotiateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NegotiateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NegotiateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NegotiateReq::MergeFrom(const NegotiateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientversion()) {
      set_clientversion(from.clientversion());
    }
    if (from.has_compresspixels()) {
      set_compresspixels(from.compresspixels());
    }
    if (from.has_surm()) {
      set_surm(from.surm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NegotiateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NegotiateReq::CopyFrom(const NegotiateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NegotiateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NegotiateReq::Swap(NegotiateReq* other) {
  if (other != this) {
    std::swap(clientversion_, other->clientversion_);
    std::swap(compresspixels_, other->compresspixels_);
    std::swap(surm_, other->surm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NegotiateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NegotiateReq_descriptor_;
  metadata.reflection = NegotiateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CloseReq::CloseReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mrdp.CloseReq)
}

void CloseReq::InitAsDefaultInstance() {
}

CloseReq::CloseReq(const CloseReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mrdp.CloseReq)
}

void CloseReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloseReq::~CloseReq() {
  // @@protoc_insertion_point(destructor:mrdp.CloseReq)
  SharedDtor();
}

void CloseReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CloseReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseReq_descriptor_;
}

const CloseReq& CloseReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mrdp_2eproto();
  return *default_instance_;
}

CloseReq* CloseReq::default_instance_ = NULL;

CloseReq* CloseReq::New() const {
  return new CloseReq;
}

void CloseReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CloseReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mrdp.CloseReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mrdp.CloseReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mrdp.CloseReq)
  return false;
#undef DO_
}

void CloseReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mrdp.CloseReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mrdp.CloseReq)
}

::google::protobuf::uint8* CloseReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mrdp.CloseReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mrdp.CloseReq)
  return target;
}

int CloseReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CloseReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CloseReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CloseReq::MergeFrom(const CloseReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CloseReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseReq::CopyFrom(const CloseReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseReq::IsInitialized() const {

  return true;
}

void CloseReq::Swap(CloseReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CloseReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseReq_descriptor_;
  metadata.reflection = CloseReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MotionActionReq::kXFieldNumber;
const int MotionActionReq::kYFieldNumber;
#endif  // !_MSC_VER

MotionActionReq::MotionActionReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mrdp.MotionActionReq)
}

void MotionActionReq::InitAsDefaultInstance() {
}

MotionActionReq::MotionActionReq(const MotionActionReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mrdp.MotionActionReq)
}

void MotionActionReq::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0u;
  y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MotionActionReq::~MotionActionReq() {
  // @@protoc_insertion_point(destructor:mrdp.MotionActionReq)
  SharedDtor();
}

void MotionActionReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MotionActionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MotionActionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MotionActionReq_descriptor_;
}

const MotionActionReq& MotionActionReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mrdp_2eproto();
  return *default_instance_;
}

MotionActionReq* MotionActionReq::default_instance_ = NULL;

MotionActionReq* MotionActionReq::New() const {
  return new MotionActionReq;
}

void MotionActionReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MotionActionReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MotionActionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mrdp.MotionActionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required uint32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mrdp.MotionActionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mrdp.MotionActionReq)
  return false;
#undef DO_
}

void MotionActionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mrdp.MotionActionReq)
  // required uint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // required uint32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mrdp.MotionActionReq)
}

::google::protobuf::uint8* MotionActionReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mrdp.MotionActionReq)
  // required uint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // required uint32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mrdp.MotionActionReq)
  return target;
}

int MotionActionReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // required uint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MotionActionReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MotionActionReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MotionActionReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MotionActionReq::MergeFrom(const MotionActionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MotionActionReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionActionReq::CopyFrom(const MotionActionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionActionReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MotionActionReq::Swap(MotionActionReq* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MotionActionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MotionActionReq_descriptor_;
  metadata.reflection = MotionActionReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ButtonActionReq::kButtonFieldNumber;
const int ButtonActionReq::kPressedFieldNumber;
#endif  // !_MSC_VER

ButtonActionReq::ButtonActionReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mrdp.ButtonActionReq)
}

void ButtonActionReq::InitAsDefaultInstance() {
}

ButtonActionReq::ButtonActionReq(const ButtonActionReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mrdp.ButtonActionReq)
}

void ButtonActionReq::SharedCtor() {
  _cached_size_ = 0;
  button_ = 0u;
  pressed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ButtonActionReq::~ButtonActionReq() {
  // @@protoc_insertion_point(destructor:mrdp.ButtonActionReq)
  SharedDtor();
}

void ButtonActionReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ButtonActionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ButtonActionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ButtonActionReq_descriptor_;
}

const ButtonActionReq& ButtonActionReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mrdp_2eproto();
  return *default_instance_;
}

ButtonActionReq* ButtonActionReq::default_instance_ = NULL;

ButtonActionReq* ButtonActionReq::New() const {
  return new ButtonActionReq;
}

void ButtonActionReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ButtonActionReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(button_, pressed_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ButtonActionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mrdp.ButtonActionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 button = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &button_)));
          set_has_button();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_pressed;
        break;
      }

      // required .mrdp.ButtonActionPress pressed = 2;
      case 2: {
        if (tag == 16) {
         parse_pressed:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mrdp::ButtonActionPress_IsValid(value)) {
            set_pressed(static_cast< ::mrdp::ButtonActionPress >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mrdp.ButtonActionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mrdp.ButtonActionReq)
  return false;
#undef DO_
}

void ButtonActionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mrdp.ButtonActionReq)
  // required uint32 button = 1;
  if (has_button()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->button(), output);
  }

  // required .mrdp.ButtonActionPress pressed = 2;
  if (has_pressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->pressed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mrdp.ButtonActionReq)
}

::google::protobuf::uint8* ButtonActionReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mrdp.ButtonActionReq)
  // required uint32 button = 1;
  if (has_button()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->button(), target);
  }

  // required .mrdp.ButtonActionPress pressed = 2;
  if (has_pressed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->pressed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mrdp.ButtonActionReq)
  return target;
}

int ButtonActionReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 button = 1;
    if (has_button()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->button());
    }

    // required .mrdp.ButtonActionPress pressed = 2;
    if (has_pressed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pressed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ButtonActionReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ButtonActionReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ButtonActionReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ButtonActionReq::MergeFrom(const ButtonActionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_button()) {
      set_button(from.button());
    }
    if (from.has_pressed()) {
      set_pressed(from.pressed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ButtonActionReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ButtonActionReq::CopyFrom(const ButtonActionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ButtonActionReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ButtonActionReq::Swap(ButtonActionReq* other) {
  if (other != this) {
    std::swap(button_, other->button_);
    std::swap(pressed_, other->pressed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ButtonActionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ButtonActionReq_descriptor_;
  metadata.reflection = ButtonActionReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeyActionReq::kKeyFieldNumber;
const int KeyActionReq::kDownFieldNumber;
#endif  // !_MSC_VER

KeyActionReq::KeyActionReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mrdp.KeyActionReq)
}

void KeyActionReq::InitAsDefaultInstance() {
}

KeyActionReq::KeyActionReq(const KeyActionReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mrdp.KeyActionReq)
}

void KeyActionReq::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0u;
  down_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyActionReq::~KeyActionReq() {
  // @@protoc_insertion_point(destructor:mrdp.KeyActionReq)
  SharedDtor();
}

void KeyActionReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeyActionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyActionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyActionReq_descriptor_;
}

const KeyActionReq& KeyActionReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mrdp_2eproto();
  return *default_instance_;
}

KeyActionReq* KeyActionReq::default_instance_ = NULL;

KeyActionReq* KeyActionReq::New() const {
  return new KeyActionReq;
}

void KeyActionReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<KeyActionReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(key_, down_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyActionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mrdp.KeyActionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 key = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_down;
        break;
      }

      // required .mrdp.KeyActionDown down = 2;
      case 2: {
        if (tag == 16) {
         parse_down:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mrdp::KeyActionDown_IsValid(value)) {
            set_down(static_cast< ::mrdp::KeyActionDown >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mrdp.KeyActionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mrdp.KeyActionReq)
  return false;
#undef DO_
}

void KeyActionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mrdp.KeyActionReq)
  // required uint32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  // required .mrdp.KeyActionDown down = 2;
  if (has_down()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->down(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mrdp.KeyActionReq)
}

::google::protobuf::uint8* KeyActionReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mrdp.KeyActionReq)
  // required uint32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }

  // required .mrdp.KeyActionDown down = 2;
  if (has_down()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->down(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mrdp.KeyActionReq)
  return target;
}

int KeyActionReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

    // required .mrdp.KeyActionDown down = 2;
    if (has_down()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->down());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyActionReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyActionReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyActionReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyActionReq::MergeFrom(const KeyActionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_down()) {
      set_down(from.down());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyActionReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyActionReq::CopyFrom(const KeyActionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyActionReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void KeyActionReq::Swap(KeyActionReq* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(down_, other->down_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyActionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyActionReq_descriptor_;
  metadata.reflection = KeyActionReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScreenUpdateReq::kSumFieldNumber;
#endif  // !_MSC_VER

ScreenUpdateReq::ScreenUpdateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mrdp.ScreenUpdateReq)
}

void ScreenUpdateReq::InitAsDefaultInstance() {
}

ScreenUpdateReq::ScreenUpdateReq(const ScreenUpdateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mrdp.ScreenUpdateReq)
}

void ScreenUpdateReq::SharedCtor() {
  _cached_size_ = 0;
  sum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScreenUpdateReq::~ScreenUpdateReq() {
  // @@protoc_insertion_point(destructor:mrdp.ScreenUpdateReq)
  SharedDtor();
}

void ScreenUpdateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScreenUpdateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScreenUpdateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScreenUpdateReq_descriptor_;
}

const ScreenUpdateReq& ScreenUpdateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mrdp_2eproto();
  return *default_instance_;
}

ScreenUpdateReq* ScreenUpdateReq::default_instance_ = NULL;

ScreenUpdateReq* ScreenUpdateReq::New() const {
  return new ScreenUpdateReq;
}

void ScreenUpdateReq::Clear() {
  sum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScreenUpdateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mrdp.ScreenUpdateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mrdp.ScreenUpdateMode sum = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mrdp::ScreenUpdateMode_IsValid(value)) {
            set_sum(static_cast< ::mrdp::ScreenUpdateMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mrdp.ScreenUpdateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mrdp.ScreenUpdateReq)
  return false;
#undef DO_
}

void ScreenUpdateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mrdp.ScreenUpdateReq)
  // required .mrdp.ScreenUpdateMode sum = 1;
  if (has_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->sum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mrdp.ScreenUpdateReq)
}

::google::protobuf::uint8* ScreenUpdateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mrdp.ScreenUpdateReq)
  // required .mrdp.ScreenUpdateMode sum = 1;
  if (has_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->sum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mrdp.ScreenUpdateReq)
  return target;
}

int ScreenUpdateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mrdp.ScreenUpdateMode sum = 1;
    if (has_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScreenUpdateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScreenUpdateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScreenUpdateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScreenUpdateReq::MergeFrom(const ScreenUpdateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sum()) {
      set_sum(from.sum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScreenUpdateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScreenUpdateReq::CopyFrom(const ScreenUpdateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScreenUpdateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ScreenUpdateReq::Swap(ScreenUpdateReq* other) {
  if (other != this) {
    std::swap(sum_, other->sum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScreenUpdateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScreenUpdateReq_descriptor_;
  metadata.reflection = ScreenUpdateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScreenUpdateReportModeReq::kSurmFieldNumber;
#endif  // !_MSC_VER

ScreenUpdateReportModeReq::ScreenUpdateReportModeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mrdp.ScreenUpdateReportModeReq)
}

void ScreenUpdateReportModeReq::InitAsDefaultInstance() {
}

ScreenUpdateReportModeReq::ScreenUpdateReportModeReq(const ScreenUpdateReportModeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mrdp.ScreenUpdateReportModeReq)
}

void ScreenUpdateReportModeReq::SharedCtor() {
  _cached_size_ = 0;
  surm_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScreenUpdateReportModeReq::~ScreenUpdateReportModeReq() {
  // @@protoc_insertion_point(destructor:mrdp.ScreenUpdateReportModeReq)
  SharedDtor();
}

void ScreenUpdateReportModeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScreenUpdateReportModeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScreenUpdateReportModeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScreenUpdateReportModeReq_descriptor_;
}

const ScreenUpdateReportModeReq& ScreenUpdateReportModeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mrdp_2eproto();
  return *default_instance_;
}

ScreenUpdateReportModeReq* ScreenUpdateReportModeReq::default_instance_ = NULL;

ScreenUpdateReportModeReq* ScreenUpdateReportModeReq::New() const {
  return new ScreenUpdateReportModeReq;
}

void ScreenUpdateReportModeReq::Clear() {
  surm_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScreenUpdateReportModeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mrdp.ScreenUpdateReportModeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mrdp.ScreenUpdateReportMode surm = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mrdp::ScreenUpdateReportMode_IsValid(value)) {
            set_surm(static_cast< ::mrdp::ScreenUpdateReportMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mrdp.ScreenUpdateReportModeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mrdp.ScreenUpdateReportModeReq)
  return false;
#undef DO_
}

void ScreenUpdateReportModeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mrdp.ScreenUpdateReportModeReq)
  // required .mrdp.ScreenUpdateReportMode surm = 1;
  if (has_surm()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->surm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mrdp.ScreenUpdateReportModeReq)
}

::google::protobuf::uint8* ScreenUpdateReportModeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mrdp.ScreenUpdateReportModeReq)
  // required .mrdp.ScreenUpdateReportMode surm = 1;
  if (has_surm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->surm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mrdp.ScreenUpdateReportModeReq)
  return target;
}

int ScreenUpdateReportModeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mrdp.ScreenUpdateReportMode surm = 1;
    if (has_surm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->surm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScreenUpdateReportModeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScreenUpdateReportModeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScreenUpdateReportModeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScreenUpdateReportModeReq::MergeFrom(const ScreenUpdateReportModeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_surm()) {
      set_surm(from.surm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScreenUpdateReportModeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScreenUpdateReportModeReq::CopyFrom(const ScreenUpdateReportModeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScreenUpdateReportModeReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ScreenUpdateReportModeReq::Swap(ScreenUpdateReportModeReq* other) {
  if (other != this) {
    std::swap(surm_, other->surm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScreenUpdateReportModeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScreenUpdateReportModeReq_descriptor_;
  metadata.reflection = ScreenUpdateReportModeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Request::kClientIDFieldNumber;
const int Request::kNegoReqFieldNumber;
const int Request::kCloseReqFieldNumber;
const int Request::kMaReqFieldNumber;
const int Request::kBaReqFieldNumber;
const int Request::kKaReqFieldNumber;
const int Request::kSuReqFieldNumber;
const int Request::kSurmReqFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mrdp.Request)
}

void Request::InitAsDefaultInstance() {
  negoreq_ = const_cast< ::mrdp::NegotiateReq*>(&::mrdp::NegotiateReq::default_instance());
  closereq_ = const_cast< ::mrdp::CloseReq*>(&::mrdp::CloseReq::default_instance());
  mareq_ = const_cast< ::mrdp::MotionActionReq*>(&::mrdp::MotionActionReq::default_instance());
  bareq_ = const_cast< ::mrdp::ButtonActionReq*>(&::mrdp::ButtonActionReq::default_instance());
  kareq_ = const_cast< ::mrdp::KeyActionReq*>(&::mrdp::KeyActionReq::default_instance());
  sureq_ = const_cast< ::mrdp::ScreenUpdateReq*>(&::mrdp::ScreenUpdateReq::default_instance());
  surmreq_ = const_cast< ::mrdp::ScreenUpdateReportModeReq*>(&::mrdp::ScreenUpdateReportModeReq::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mrdp.Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = 0u;
  negoreq_ = NULL;
  closereq_ = NULL;
  mareq_ = NULL;
  bareq_ = NULL;
  kareq_ = NULL;
  sureq_ = NULL;
  surmreq_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:mrdp.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != default_instance_) {
    delete negoreq_;
    delete closereq_;
    delete mareq_;
    delete bareq_;
    delete kareq_;
    delete sureq_;
    delete surmreq_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mrdp_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    clientid_ = 0u;
    if (has_negoreq()) {
      if (negoreq_ != NULL) negoreq_->::mrdp::NegotiateReq::Clear();
    }
    if (has_closereq()) {
      if (closereq_ != NULL) closereq_->::mrdp::CloseReq::Clear();
    }
    if (has_mareq()) {
      if (mareq_ != NULL) mareq_->::mrdp::MotionActionReq::Clear();
    }
    if (has_bareq()) {
      if (bareq_ != NULL) bareq_->::mrdp::ButtonActionReq::Clear();
    }
    if (has_kareq()) {
      if (kareq_ != NULL) kareq_->::mrdp::KeyActionReq::Clear();
    }
    if (has_sureq()) {
      if (sureq_ != NULL) sureq_->::mrdp::ScreenUpdateReq::Clear();
    }
    if (has_surmreq()) {
      if (surmreq_ != NULL) surmreq_->::mrdp::ScreenUpdateReportModeReq::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mrdp.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 clientID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_negoReq;
        break;
      }

      // optional .mrdp.NegotiateReq negoReq = 2;
      case 2: {
        if (tag == 18) {
         parse_negoReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_negoreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_closeReq;
        break;
      }

      // optional .mrdp.CloseReq closeReq = 3;
      case 3: {
        if (tag == 26) {
         parse_closeReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_closereq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_maReq;
        break;
      }

      // optional .mrdp.MotionActionReq maReq = 4;
      case 4: {
        if (tag == 34) {
         parse_maReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mareq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_baReq;
        break;
      }

      // optional .mrdp.ButtonActionReq baReq = 5;
      case 5: {
        if (tag == 42) {
         parse_baReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bareq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_kaReq;
        break;
      }

      // optional .mrdp.KeyActionReq kaReq = 6;
      case 6: {
        if (tag == 50) {
         parse_kaReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kareq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_suReq;
        break;
      }

      // optional .mrdp.ScreenUpdateReq suReq = 7;
      case 7: {
        if (tag == 58) {
         parse_suReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sureq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_surmReq;
        break;
      }

      // optional .mrdp.ScreenUpdateReportModeReq surmReq = 8;
      case 8: {
        if (tag == 66) {
         parse_surmReq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_surmreq()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mrdp.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mrdp.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mrdp.Request)
  // required uint32 clientID = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clientid(), output);
  }

  // optional .mrdp.NegotiateReq negoReq = 2;
  if (has_negoreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->negoreq(), output);
  }

  // optional .mrdp.CloseReq closeReq = 3;
  if (has_closereq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->closereq(), output);
  }

  // optional .mrdp.MotionActionReq maReq = 4;
  if (has_mareq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mareq(), output);
  }

  // optional .mrdp.ButtonActionReq baReq = 5;
  if (has_bareq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bareq(), output);
  }

  // optional .mrdp.KeyActionReq kaReq = 6;
  if (has_kareq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->kareq(), output);
  }

  // optional .mrdp.ScreenUpdateReq suReq = 7;
  if (has_sureq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->sureq(), output);
  }

  // optional .mrdp.ScreenUpdateReportModeReq surmReq = 8;
  if (has_surmreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->surmreq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mrdp.Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mrdp.Request)
  // required uint32 clientID = 1;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clientid(), target);
  }

  // optional .mrdp.NegotiateReq negoReq = 2;
  if (has_negoreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->negoreq(), target);
  }

  // optional .mrdp.CloseReq closeReq = 3;
  if (has_closereq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->closereq(), target);
  }

  // optional .mrdp.MotionActionReq maReq = 4;
  if (has_mareq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mareq(), target);
  }

  // optional .mrdp.ButtonActionReq baReq = 5;
  if (has_bareq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bareq(), target);
  }

  // optional .mrdp.KeyActionReq kaReq = 6;
  if (has_kareq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->kareq(), target);
  }

  // optional .mrdp.ScreenUpdateReq suReq = 7;
  if (has_sureq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->sureq(), target);
  }

  // optional .mrdp.ScreenUpdateReportModeReq surmReq = 8;
  if (has_surmreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->surmreq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mrdp.Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 clientID = 1;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

    // optional .mrdp.NegotiateReq negoReq = 2;
    if (has_negoreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->negoreq());
    }

    // optional .mrdp.CloseReq closeReq = 3;
    if (has_closereq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->closereq());
    }

    // optional .mrdp.MotionActionReq maReq = 4;
    if (has_mareq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mareq());
    }

    // optional .mrdp.ButtonActionReq baReq = 5;
    if (has_bareq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bareq());
    }

    // optional .mrdp.KeyActionReq kaReq = 6;
    if (has_kareq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->kareq());
    }

    // optional .mrdp.ScreenUpdateReq suReq = 7;
    if (has_sureq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sureq());
    }

    // optional .mrdp.ScreenUpdateReportModeReq surmReq = 8;
    if (has_surmreq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->surmreq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_negoreq()) {
      mutable_negoreq()->::mrdp::NegotiateReq::MergeFrom(from.negoreq());
    }
    if (from.has_closereq()) {
      mutable_closereq()->::mrdp::CloseReq::MergeFrom(from.closereq());
    }
    if (from.has_mareq()) {
      mutable_mareq()->::mrdp::MotionActionReq::MergeFrom(from.mareq());
    }
    if (from.has_bareq()) {
      mutable_bareq()->::mrdp::ButtonActionReq::MergeFrom(from.bareq());
    }
    if (from.has_kareq()) {
      mutable_kareq()->::mrdp::KeyActionReq::MergeFrom(from.kareq());
    }
    if (from.has_sureq()) {
      mutable_sureq()->::mrdp::ScreenUpdateReq::MergeFrom(from.sureq());
    }
    if (from.has_surmreq()) {
      mutable_surmreq()->::mrdp::ScreenUpdateReportModeReq::MergeFrom(from.surmreq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_negoreq()) {
    if (!this->negoreq().IsInitialized()) return false;
  }
  if (has_mareq()) {
    if (!this->mareq().IsInitialized()) return false;
  }
  if (has_bareq()) {
    if (!this->bareq().IsInitialized()) return false;
  }
  if (has_kareq()) {
    if (!this->kareq().IsInitialized()) return false;
  }
  if (has_sureq()) {
    if (!this->sureq().IsInitialized()) return false;
  }
  if (has_surmreq()) {
    if (!this->surmreq().IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(negoreq_, other->negoreq_);
    std::swap(closereq_, other->closereq_);
    std::swap(mareq_, other->mareq_);
    std::swap(bareq_, other->bareq_);
    std::swap(kareq_, other->kareq_);
    std::swap(sureq_, other->sureq_);
    std::swap(surmreq_, other->surmreq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NegotiateResp::kServerVersionFieldNumber;
const int NegotiateResp::kFormatFieldNumber;
const int NegotiateResp::kPixelInBigEndianFieldNumber;
const int NegotiateResp::kScreenRectFieldNumber;
#endif  // !_MSC_VER

NegotiateResp::NegotiateResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mrdp.NegotiateResp)
}

void NegotiateResp::InitAsDefaultInstance() {
  screenrect_ = const_cast< ::mrdp::Rect*>(&::mrdp::Rect::default_instance());
}

NegotiateResp::NegotiateResp(const NegotiateResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mrdp.NegotiateResp)
}

void NegotiateResp::SharedCtor() {
  _cached_size_ = 0;
  serverversion_ = 65536;
  format_ = 0;
  pixelinbigendian_ = 0;
  screenrect_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NegotiateResp::~NegotiateResp() {
  // @@protoc_insertion_point(destructor:mrdp.NegotiateResp)
  SharedDtor();
}

void NegotiateResp::SharedDtor() {
  if (this != default_instance_) {
    delete screenrect_;
  }
}

void NegotiateResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NegotiateResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NegotiateResp_descriptor_;
}

const NegotiateResp& NegotiateResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mrdp_2eproto();
  return *default_instance_;
}

NegotiateResp* NegotiateResp::default_instance_ = NULL;

NegotiateResp* NegotiateResp::New() const {
  return new NegotiateResp;
}

void NegotiateResp::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    serverversion_ = 65536;
    format_ = 0;
    pixelinbigendian_ = 0;
    if (has_screenrect()) {
      if (screenrect_ != NULL) screenrect_->::mrdp::Rect::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NegotiateResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mrdp.NegotiateResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mrdp.ProtocolVersion serverVersion = 1 [default = PROTOVER_CURRENT];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mrdp::ProtocolVersion_IsValid(value)) {
            set_serverversion(static_cast< ::mrdp::ProtocolVersion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_format;
        break;
      }

      // required .mrdp.Format format = 2;
      case 2: {
        if (tag == 16) {
         parse_format:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mrdp::Format_IsValid(value)) {
            set_format(static_cast< ::mrdp::Format >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pixelInBigEndian;
        break;
      }

      // required .mrdp.Switch pixelInBigEndian = 3;
      case 3: {
        if (tag == 24) {
         parse_pixelInBigEndian:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mrdp::Switch_IsValid(value)) {
            set_pixelinbigendian(static_cast< ::mrdp::Switch >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_screenRect;
        break;
      }

      // required .mrdp.Rect screenRect = 4;
      case 4: {
        if (tag == 34) {
         parse_screenRect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_screenrect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mrdp.NegotiateResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mrdp.NegotiateResp)
  return false;
#undef DO_
}

void NegotiateResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mrdp.NegotiateResp)
  // required .mrdp.ProtocolVersion serverVersion = 1 [default = PROTOVER_CURRENT];
  if (has_serverversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->serverversion(), output);
  }

  // required .mrdp.Format format = 2;
  if (has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->format(), output);
  }

  // required .mrdp.Switch pixelInBigEndian = 3;
  if (has_pixelinbigendian()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->pixelinbigendian(), output);
  }

  // required .mrdp.Rect screenRect = 4;
  if (has_screenrect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->screenrect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mrdp.NegotiateResp)
}

::google::protobuf::uint8* NegotiateResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mrdp.NegotiateResp)
  // required .mrdp.ProtocolVersion serverVersion = 1 [default = PROTOVER_CURRENT];
  if (has_serverversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->serverversion(), target);
  }

  // required .mrdp.Format format = 2;
  if (has_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->format(), target);
  }

  // required .mrdp.Switch pixelInBigEndian = 3;
  if (has_pixelinbigendian()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->pixelinbigendian(), target);
  }

  // required .mrdp.Rect screenRect = 4;
  if (has_screenrect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->screenrect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mrdp.NegotiateResp)
  return target;
}

int NegotiateResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mrdp.ProtocolVersion serverVersion = 1 [default = PROTOVER_CURRENT];
    if (has_serverversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->serverversion());
    }

    // required .mrdp.Format format = 2;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
    }

    // required .mrdp.Switch pixelInBigEndian = 3;
    if (has_pixelinbigendian()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pixelinbigendian());
    }

    // required .mrdp.Rect screenRect = 4;
    if (has_screenrect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->screenrect());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NegotiateResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NegotiateResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NegotiateResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NegotiateResp::MergeFrom(const NegotiateResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverversion()) {
      set_serverversion(from.serverversion());
    }
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_pixelinbigendian()) {
      set_pixelinbigendian(from.pixelinbigendian());
    }
    if (from.has_screenrect()) {
      mutable_screenrect()->::mrdp::Rect::MergeFrom(from.screenrect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NegotiateResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NegotiateResp::CopyFrom(const NegotiateResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NegotiateResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_screenrect()) {
    if (!this->screenrect().IsInitialized()) return false;
  }
  return true;
}

void NegotiateResp::Swap(NegotiateResp* other) {
  if (other != this) {
    std::swap(serverversion_, other->serverversion_);
    std::swap(format_, other->format_);
    std::swap(pixelinbigendian_, other->pixelinbigendian_);
    std::swap(screenrect_, other->screenrect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NegotiateResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NegotiateResp_descriptor_;
  metadata.reflection = NegotiateResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CloseResp::CloseResp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mrdp.CloseResp)
}

void CloseResp::InitAsDefaultInstance() {
}

CloseResp::CloseResp(const CloseResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mrdp.CloseResp)
}

void CloseResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloseResp::~CloseResp() {
  // @@protoc_insertion_point(destructor:mrdp.CloseResp)
  SharedDtor();
}

void CloseResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CloseResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseResp_descriptor_;
}

const CloseResp& CloseResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mrdp_2eproto();
  return *default_instance_;
}

CloseResp* CloseResp::default_instance_ = NULL;

CloseResp* CloseResp::New() const {
  return new CloseResp;
}

void CloseResp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CloseResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mrdp.CloseResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mrdp.CloseResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mrdp.CloseResp)
  return false;
#undef DO_
}

void CloseResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mrdp.CloseResp)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mrdp.CloseResp)
}

::google::protobuf::uint8* CloseResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mrdp.CloseResp)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mrdp.CloseResp)
  return target;
}

int CloseResp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CloseResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CloseResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CloseResp::MergeFrom(const CloseResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CloseResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseResp::CopyFrom(const CloseResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseResp::IsInitialized() const {

  return true;
}

void CloseResp::Swap(CloseResp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CloseResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseResp_descriptor_;
  metadata.reflection = CloseResp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Response::kClientIDFieldNumber;
const int Response::kErrorFieldNumber;
const int Response::kNegoRespFieldNumber;
const int Response::kCloseRespFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mrdp.Response)
}

void Response::InitAsDefaultInstance() {
  negoresp_ = const_cast< ::mrdp::NegotiateResp*>(&::mrdp::NegotiateResp::default_instance());
  closeresp_ = const_cast< ::mrdp::CloseResp*>(&::mrdp::CloseResp::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mrdp.Response)
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = 0u;
  error_ = 0;
  negoresp_ = NULL;
  closeresp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:mrdp.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != default_instance_) {
    delete negoresp_;
    delete closeresp_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mrdp_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New() const {
  return new Response;
}

void Response::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Response*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(clientid_, error_);
    if (has_negoresp()) {
      if (negoresp_ != NULL) negoresp_->::mrdp::NegotiateResp::Clear();
    }
    if (has_closeresp()) {
      if (closeresp_ != NULL) closeresp_->::mrdp::CloseResp::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mrdp.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 clientID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // required .mrdp.ErrorNo error = 2;
      case 2: {
        if (tag == 16) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mrdp::ErrorNo_IsValid(value)) {
            set_error(static_cast< ::mrdp::ErrorNo >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_negoResp;
        break;
      }

      // optional .mrdp.NegotiateResp negoResp = 3;
      case 3: {
        if (tag == 26) {
         parse_negoResp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_negoresp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_closeResp;
        break;
      }

      // optional .mrdp.CloseResp closeResp = 4;
      case 4: {
        if (tag == 34) {
         parse_closeResp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_closeresp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mrdp.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mrdp.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mrdp.Response)
  // required uint32 clientID = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clientid(), output);
  }

  // required .mrdp.ErrorNo error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->error(), output);
  }

  // optional .mrdp.NegotiateResp negoResp = 3;
  if (has_negoresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->negoresp(), output);
  }

  // optional .mrdp.CloseResp closeResp = 4;
  if (has_closeresp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->closeresp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mrdp.Response)
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mrdp.Response)
  // required uint32 clientID = 1;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clientid(), target);
  }

  // required .mrdp.ErrorNo error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->error(), target);
  }

  // optional .mrdp.NegotiateResp negoResp = 3;
  if (has_negoresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->negoresp(), target);
  }

  // optional .mrdp.CloseResp closeResp = 4;
  if (has_closeresp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->closeresp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mrdp.Response)
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 clientID = 1;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

    // required .mrdp.ErrorNo error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

    // optional .mrdp.NegotiateResp negoResp = 3;
    if (has_negoresp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->negoresp());
    }

    // optional .mrdp.CloseResp closeResp = 4;
    if (has_closeresp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->closeresp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_negoresp()) {
      mutable_negoresp()->::mrdp::NegotiateResp::MergeFrom(from.negoresp());
    }
    if (from.has_closeresp()) {
      mutable_closeresp()->::mrdp::CloseResp::MergeFrom(from.closeresp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_negoresp()) {
    if (!this->negoresp().IsInitialized()) return false;
  }
  return true;
}

void Response::Swap(Response* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(error_, other->error_);
    std::swap(negoresp_, other->negoresp_);
    std::swap(closeresp_, other->closeresp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NegotiateEvt::kServerVersionFieldNumber;
const int NegotiateEvt::kCompressPixelSuggestionFieldNumber;
const int NegotiateEvt::kSurmFieldNumber;
#endif  // !_MSC_VER

NegotiateEvt::NegotiateEvt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mrdp.NegotiateEvt)
}

void NegotiateEvt::InitAsDefaultInstance() {
}

NegotiateEvt::NegotiateEvt(const NegotiateEvt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mrdp.NegotiateEvt)
}

void NegotiateEvt::SharedCtor() {
  _cached_size_ = 0;
  serverversion_ = 65536;
  compresspixelsuggestion_ = 0;
  surm_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NegotiateEvt::~NegotiateEvt() {
  // @@protoc_insertion_point(destructor:mrdp.NegotiateEvt)
  SharedDtor();
}

void NegotiateEvt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NegotiateEvt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NegotiateEvt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NegotiateEvt_descriptor_;
}

const NegotiateEvt& NegotiateEvt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mrdp_2eproto();
  return *default_instance_;
}

NegotiateEvt* NegotiateEvt::default_instance_ = NULL;

NegotiateEvt* NegotiateEvt::New() const {
  return new NegotiateEvt;
}

void NegotiateEvt::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NegotiateEvt*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(compresspixelsuggestion_, surm_);
    serverversion_ = 65536;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NegotiateEvt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mrdp.NegotiateEvt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mrdp.ProtocolVersion serverVersion = 1 [default = PROTOVER_CURRENT];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mrdp::ProtocolVersion_IsValid(value)) {
            set_serverversion(static_cast< ::mrdp::ProtocolVersion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_compressPixelSuggestion;
        break;
      }

      // required .mrdp.Switch compressPixelSuggestion = 2;
      case 2: {
        if (tag == 16) {
         parse_compressPixelSuggestion:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mrdp::Switch_IsValid(value)) {
            set_compresspixelsuggestion(static_cast< ::mrdp::Switch >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_surm;
        break;
      }

      // required .mrdp.ScreenUpdateReportMode surm = 3;
      case 3: {
        if (tag == 24) {
         parse_surm:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mrdp::ScreenUpdateReportMode_IsValid(value)) {
            set_surm(static_cast< ::mrdp::ScreenUpdateReportMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mrdp.NegotiateEvt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mrdp.NegotiateEvt)
  return false;
#undef DO_
}

void NegotiateEvt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mrdp.NegotiateEvt)
  // required .mrdp.ProtocolVersion serverVersion = 1 [default = PROTOVER_CURRENT];
  if (has_serverversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->serverversion(), output);
  }

  // required .mrdp.Switch compressPixelSuggestion = 2;
  if (has_compresspixelsuggestion()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->compresspixelsuggestion(), output);
  }

  // required .mrdp.ScreenUpdateReportMode surm = 3;
  if (has_surm()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->surm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mrdp.NegotiateEvt)
}

::google::protobuf::uint8* NegotiateEvt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mrdp.NegotiateEvt)
  // required .mrdp.ProtocolVersion serverVersion = 1 [default = PROTOVER_CURRENT];
  if (has_serverversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->serverversion(), target);
  }

  // required .mrdp.Switch compressPixelSuggestion = 2;
  if (has_compresspixelsuggestion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->compresspixelsuggestion(), target);
  }

  // required .mrdp.ScreenUpdateReportMode surm = 3;
  if (has_surm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->surm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mrdp.NegotiateEvt)
  return target;
}

int NegotiateEvt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mrdp.ProtocolVersion serverVersion = 1 [default = PROTOVER_CURRENT];
    if (has_serverversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->serverversion());
    }

    // required .mrdp.Switch compressPixelSuggestion = 2;
    if (has_compresspixelsuggestion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->compresspixelsuggestion());
    }

    // required .mrdp.ScreenUpdateReportMode surm = 3;
    if (has_surm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->surm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NegotiateEvt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NegotiateEvt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NegotiateEvt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NegotiateEvt::MergeFrom(const NegotiateEvt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverversion()) {
      set_serverversion(from.serverversion());
    }
    if (from.has_compresspixelsuggestion()) {
      set_compresspixelsuggestion(from.compresspixelsuggestion());
    }
    if (from.has_surm()) {
      set_surm(from.surm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NegotiateEvt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NegotiateEvt::CopyFrom(const NegotiateEvt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NegotiateEvt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NegotiateEvt::Swap(NegotiateEvt* other) {
  if (other != this) {
    std::swap(serverversion_, other->serverversion_);
    std::swap(compresspixelsuggestion_, other->compresspixelsuggestion_);
    std::swap(surm_, other->surm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NegotiateEvt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NegotiateEvt_descriptor_;
  metadata.reflection = NegotiateEvt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScreenUpdatedEvt::kDirtyRegionFieldNumber;
const int ScreenUpdatedEvt::kDirtyPixelsFieldNumber;
#endif  // !_MSC_VER

ScreenUpdatedEvt::ScreenUpdatedEvt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mrdp.ScreenUpdatedEvt)
}

void ScreenUpdatedEvt::InitAsDefaultInstance() {
}

ScreenUpdatedEvt::ScreenUpdatedEvt(const ScreenUpdatedEvt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mrdp.ScreenUpdatedEvt)
}

void ScreenUpdatedEvt::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dirtypixels_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScreenUpdatedEvt::~ScreenUpdatedEvt() {
  // @@protoc_insertion_point(destructor:mrdp.ScreenUpdatedEvt)
  SharedDtor();
}

void ScreenUpdatedEvt::SharedDtor() {
  if (dirtypixels_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dirtypixels_;
  }
  if (this != default_instance_) {
  }
}

void ScreenUpdatedEvt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScreenUpdatedEvt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScreenUpdatedEvt_descriptor_;
}

const ScreenUpdatedEvt& ScreenUpdatedEvt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mrdp_2eproto();
  return *default_instance_;
}

ScreenUpdatedEvt* ScreenUpdatedEvt::default_instance_ = NULL;

ScreenUpdatedEvt* ScreenUpdatedEvt::New() const {
  return new ScreenUpdatedEvt;
}

void ScreenUpdatedEvt::Clear() {
  if (has_dirtypixels()) {
    if (dirtypixels_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      dirtypixels_->clear();
    }
  }
  dirtyregion_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScreenUpdatedEvt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mrdp.ScreenUpdatedEvt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mrdp.Rect dirtyRegion = 1;
      case 1: {
        if (tag == 10) {
         parse_dirtyRegion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dirtyregion()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_dirtyRegion;
        if (input->ExpectTag(18)) goto parse_dirtyPixels;
        break;
      }

      // optional bytes dirtyPixels = 2;
      case 2: {
        if (tag == 18) {
         parse_dirtyPixels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dirtypixels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mrdp.ScreenUpdatedEvt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mrdp.ScreenUpdatedEvt)
  return false;
#undef DO_
}

void ScreenUpdatedEvt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mrdp.ScreenUpdatedEvt)
  // repeated .mrdp.Rect dirtyRegion = 1;
  for (int i = 0; i < this->dirtyregion_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dirtyregion(i), output);
  }

  // optional bytes dirtyPixels = 2;
  if (has_dirtypixels()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->dirtypixels(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mrdp.ScreenUpdatedEvt)
}

::google::protobuf::uint8* ScreenUpdatedEvt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mrdp.ScreenUpdatedEvt)
  // repeated .mrdp.Rect dirtyRegion = 1;
  for (int i = 0; i < this->dirtyregion_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dirtyregion(i), target);
  }

  // optional bytes dirtyPixels = 2;
  if (has_dirtypixels()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->dirtypixels(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mrdp.ScreenUpdatedEvt)
  return target;
}

int ScreenUpdatedEvt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes dirtyPixels = 2;
    if (has_dirtypixels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dirtypixels());
    }

  }
  // repeated .mrdp.Rect dirtyRegion = 1;
  total_size += 1 * this->dirtyregion_size();
  for (int i = 0; i < this->dirtyregion_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dirtyregion(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScreenUpdatedEvt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScreenUpdatedEvt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScreenUpdatedEvt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScreenUpdatedEvt::MergeFrom(const ScreenUpdatedEvt& from) {
  GOOGLE_CHECK_NE(&from, this);
  dirtyregion_.MergeFrom(from.dirtyregion_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_dirtypixels()) {
      set_dirtypixels(from.dirtypixels());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScreenUpdatedEvt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScreenUpdatedEvt::CopyFrom(const ScreenUpdatedEvt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScreenUpdatedEvt::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->dirtyregion())) return false;
  return true;
}

void ScreenUpdatedEvt::Swap(ScreenUpdatedEvt* other) {
  if (other != this) {
    dirtyregion_.Swap(&other->dirtyregion_);
    std::swap(dirtypixels_, other->dirtypixels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScreenUpdatedEvt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScreenUpdatedEvt_descriptor_;
  metadata.reflection = ScreenUpdatedEvt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScreenResizedEvt::kScreenRectFieldNumber;
#endif  // !_MSC_VER

ScreenResizedEvt::ScreenResizedEvt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mrdp.ScreenResizedEvt)
}

void ScreenResizedEvt::InitAsDefaultInstance() {
  screenrect_ = const_cast< ::mrdp::Rect*>(&::mrdp::Rect::default_instance());
}

ScreenResizedEvt::ScreenResizedEvt(const ScreenResizedEvt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mrdp.ScreenResizedEvt)
}

void ScreenResizedEvt::SharedCtor() {
  _cached_size_ = 0;
  screenrect_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScreenResizedEvt::~ScreenResizedEvt() {
  // @@protoc_insertion_point(destructor:mrdp.ScreenResizedEvt)
  SharedDtor();
}

void ScreenResizedEvt::SharedDtor() {
  if (this != default_instance_) {
    delete screenrect_;
  }
}

void ScreenResizedEvt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScreenResizedEvt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScreenResizedEvt_descriptor_;
}

const ScreenResizedEvt& ScreenResizedEvt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mrdp_2eproto();
  return *default_instance_;
}

ScreenResizedEvt* ScreenResizedEvt::default_instance_ = NULL;

ScreenResizedEvt* ScreenResizedEvt::New() const {
  return new ScreenResizedEvt;
}

void ScreenResizedEvt::Clear() {
  if (has_screenrect()) {
    if (screenrect_ != NULL) screenrect_->::mrdp::Rect::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScreenResizedEvt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mrdp.ScreenResizedEvt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mrdp.Rect screenRect = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_screenrect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mrdp.ScreenResizedEvt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mrdp.ScreenResizedEvt)
  return false;
#undef DO_
}

void ScreenResizedEvt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mrdp.ScreenResizedEvt)
  // required .mrdp.Rect screenRect = 1;
  if (has_screenrect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->screenrect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mrdp.ScreenResizedEvt)
}

::google::protobuf::uint8* ScreenResizedEvt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mrdp.ScreenResizedEvt)
  // required .mrdp.Rect screenRect = 1;
  if (has_screenrect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->screenrect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mrdp.ScreenResizedEvt)
  return target;
}

int ScreenResizedEvt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mrdp.Rect screenRect = 1;
    if (has_screenrect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->screenrect());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScreenResizedEvt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScreenResizedEvt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScreenResizedEvt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScreenResizedEvt::MergeFrom(const ScreenResizedEvt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_screenrect()) {
      mutable_screenrect()->::mrdp::Rect::MergeFrom(from.screenrect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScreenResizedEvt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScreenResizedEvt::CopyFrom(const ScreenResizedEvt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScreenResizedEvt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_screenrect()) {
    if (!this->screenrect().IsInitialized()) return false;
  }
  return true;
}

void ScreenResizedEvt::Swap(ScreenResizedEvt* other) {
  if (other != this) {
    std::swap(screenrect_, other->screenrect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScreenResizedEvt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScreenResizedEvt_descriptor_;
  metadata.reflection = ScreenResizedEvt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ServerShutdownEvt::ServerShutdownEvt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mrdp.ServerShutdownEvt)
}

void ServerShutdownEvt::InitAsDefaultInstance() {
}

ServerShutdownEvt::ServerShutdownEvt(const ServerShutdownEvt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mrdp.ServerShutdownEvt)
}

void ServerShutdownEvt::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerShutdownEvt::~ServerShutdownEvt() {
  // @@protoc_insertion_point(destructor:mrdp.ServerShutdownEvt)
  SharedDtor();
}

void ServerShutdownEvt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerShutdownEvt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerShutdownEvt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerShutdownEvt_descriptor_;
}

const ServerShutdownEvt& ServerShutdownEvt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mrdp_2eproto();
  return *default_instance_;
}

ServerShutdownEvt* ServerShutdownEvt::default_instance_ = NULL;

ServerShutdownEvt* ServerShutdownEvt::New() const {
  return new ServerShutdownEvt;
}

void ServerShutdownEvt::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerShutdownEvt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mrdp.ServerShutdownEvt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mrdp.ServerShutdownEvt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mrdp.ServerShutdownEvt)
  return false;
#undef DO_
}

void ServerShutdownEvt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mrdp.ServerShutdownEvt)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mrdp.ServerShutdownEvt)
}

::google::protobuf::uint8* ServerShutdownEvt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mrdp.ServerShutdownEvt)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mrdp.ServerShutdownEvt)
  return target;
}

int ServerShutdownEvt::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerShutdownEvt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerShutdownEvt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerShutdownEvt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerShutdownEvt::MergeFrom(const ServerShutdownEvt& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerShutdownEvt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerShutdownEvt::CopyFrom(const ServerShutdownEvt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerShutdownEvt::IsInitialized() const {

  return true;
}

void ServerShutdownEvt::Swap(ServerShutdownEvt* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerShutdownEvt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerShutdownEvt_descriptor_;
  metadata.reflection = ServerShutdownEvt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Event::kClientIDFieldNumber;
const int Event::kNegoEvtFieldNumber;
const int Event::kSuEvtFieldNumber;
const int Event::kSrEvtFieldNumber;
const int Event::kSsEvtFieldNumber;
#endif  // !_MSC_VER

Event::Event()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mrdp.Event)
}

void Event::InitAsDefaultInstance() {
  negoevt_ = const_cast< ::mrdp::NegotiateEvt*>(&::mrdp::NegotiateEvt::default_instance());
  suevt_ = const_cast< ::mrdp::ScreenUpdatedEvt*>(&::mrdp::ScreenUpdatedEvt::default_instance());
  srevt_ = const_cast< ::mrdp::ScreenResizedEvt*>(&::mrdp::ScreenResizedEvt::default_instance());
  ssevt_ = const_cast< ::mrdp::ServerShutdownEvt*>(&::mrdp::ServerShutdownEvt::default_instance());
}

Event::Event(const Event& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mrdp.Event)
}

void Event::SharedCtor() {
  _cached_size_ = 0;
  clientid_ = 0u;
  negoevt_ = NULL;
  suevt_ = NULL;
  srevt_ = NULL;
  ssevt_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:mrdp.Event)
  SharedDtor();
}

void Event::SharedDtor() {
  if (this != default_instance_) {
    delete negoevt_;
    delete suevt_;
    delete srevt_;
    delete ssevt_;
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_descriptor_;
}

const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mrdp_2eproto();
  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New() const {
  return new Event;
}

void Event::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    clientid_ = 0u;
    if (has_negoevt()) {
      if (negoevt_ != NULL) negoevt_->::mrdp::NegotiateEvt::Clear();
    }
    if (has_suevt()) {
      if (suevt_ != NULL) suevt_->::mrdp::ScreenUpdatedEvt::Clear();
    }
    if (has_srevt()) {
      if (srevt_ != NULL) srevt_->::mrdp::ScreenResizedEvt::Clear();
    }
    if (has_ssevt()) {
      if (ssevt_ != NULL) ssevt_->::mrdp::ServerShutdownEvt::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mrdp.Event)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 clientID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_negoEvt;
        break;
      }

      // optional .mrdp.NegotiateEvt negoEvt = 2;
      case 2: {
        if (tag == 18) {
         parse_negoEvt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_negoevt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_suEvt;
        break;
      }

      // optional .mrdp.ScreenUpdatedEvt suEvt = 3;
      case 3: {
        if (tag == 26) {
         parse_suEvt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_suevt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_srEvt;
        break;
      }

      // optional .mrdp.ScreenResizedEvt srEvt = 4;
      case 4: {
        if (tag == 34) {
         parse_srEvt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_srevt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ssEvt;
        break;
      }

      // optional .mrdp.ServerShutdownEvt ssEvt = 5;
      case 5: {
        if (tag == 42) {
         parse_ssEvt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ssevt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mrdp.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mrdp.Event)
  return false;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mrdp.Event)
  // required uint32 clientID = 1;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->clientid(), output);
  }

  // optional .mrdp.NegotiateEvt negoEvt = 2;
  if (has_negoevt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->negoevt(), output);
  }

  // optional .mrdp.ScreenUpdatedEvt suEvt = 3;
  if (has_suevt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->suevt(), output);
  }

  // optional .mrdp.ScreenResizedEvt srEvt = 4;
  if (has_srevt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->srevt(), output);
  }

  // optional .mrdp.ServerShutdownEvt ssEvt = 5;
  if (has_ssevt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ssevt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mrdp.Event)
}

::google::protobuf::uint8* Event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mrdp.Event)
  // required uint32 clientID = 1;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->clientid(), target);
  }

  // optional .mrdp.NegotiateEvt negoEvt = 2;
  if (has_negoevt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->negoevt(), target);
  }

  // optional .mrdp.ScreenUpdatedEvt suEvt = 3;
  if (has_suevt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->suevt(), target);
  }

  // optional .mrdp.ScreenResizedEvt srEvt = 4;
  if (has_srevt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->srevt(), target);
  }

  // optional .mrdp.ServerShutdownEvt ssEvt = 5;
  if (has_ssevt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ssevt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mrdp.Event)
  return target;
}

int Event::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 clientID = 1;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientid());
    }

    // optional .mrdp.NegotiateEvt negoEvt = 2;
    if (has_negoevt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->negoevt());
    }

    // optional .mrdp.ScreenUpdatedEvt suEvt = 3;
    if (has_suevt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->suevt());
    }

    // optional .mrdp.ScreenResizedEvt srEvt = 4;
    if (has_srevt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->srevt());
    }

    // optional .mrdp.ServerShutdownEvt ssEvt = 5;
    if (has_ssevt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ssevt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_negoevt()) {
      mutable_negoevt()->::mrdp::NegotiateEvt::MergeFrom(from.negoevt());
    }
    if (from.has_suevt()) {
      mutable_suevt()->::mrdp::ScreenUpdatedEvt::MergeFrom(from.suevt());
    }
    if (from.has_srevt()) {
      mutable_srevt()->::mrdp::ScreenResizedEvt::MergeFrom(from.srevt());
    }
    if (from.has_ssevt()) {
      mutable_ssevt()->::mrdp::ServerShutdownEvt::MergeFrom(from.ssevt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_negoevt()) {
    if (!this->negoevt().IsInitialized()) return false;
  }
  if (has_suevt()) {
    if (!this->suevt().IsInitialized()) return false;
  }
  if (has_srevt()) {
    if (!this->srevt().IsInitialized()) return false;
  }
  return true;
}

void Event::Swap(Event* other) {
  if (other != this) {
    std::swap(clientid_, other->clientid_);
    std::swap(negoevt_, other->negoevt_);
    std::swap(suevt_, other->suevt_);
    std::swap(srevt_, other->srevt_);
    std::swap(ssevt_, other->ssevt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_descriptor_;
  metadata.reflection = Event_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Message::kIdFieldNumber;
const int Message::kReqFieldNumber;
const int Message::kRespFieldNumber;
const int Message::kEvtFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mrdp.Message)
}

void Message::InitAsDefaultInstance() {
  req_ = const_cast< ::mrdp::Request*>(&::mrdp::Request::default_instance());
  resp_ = const_cast< ::mrdp::Response*>(&::mrdp::Response::default_instance());
  evt_ = const_cast< ::mrdp::Event*>(&::mrdp::Event::default_instance());
}

Message::Message(const Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mrdp.Message)
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  req_ = NULL;
  resp_ = NULL;
  evt_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:mrdp.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != default_instance_) {
    delete req_;
    delete resp_;
    delete evt_;
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mrdp_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    id_ = 0;
    if (has_req()) {
      if (req_ != NULL) req_->::mrdp::Request::Clear();
    }
    if (has_resp()) {
      if (resp_ != NULL) resp_->::mrdp::Response::Clear();
    }
    if (has_evt()) {
      if (evt_ != NULL) evt_->::mrdp::Event::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mrdp.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mrdp.MSG_ID id = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mrdp::MSG_ID_IsValid(value)) {
            set_id(static_cast< ::mrdp::MSG_ID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_req;
        break;
      }

      // optional .mrdp.Request req = 2;
      case 2: {
        if (tag == 18) {
         parse_req:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_resp;
        break;
      }

      // optional .mrdp.Response resp = 3;
      case 3: {
        if (tag == 26) {
         parse_resp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_evt;
        break;
      }

      // optional .mrdp.Event evt = 4;
      case 4: {
        if (tag == 34) {
         parse_evt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_evt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mrdp.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mrdp.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mrdp.Message)
  // required .mrdp.MSG_ID id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->id(), output);
  }

  // optional .mrdp.Request req = 2;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->req(), output);
  }

  // optional .mrdp.Response resp = 3;
  if (has_resp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->resp(), output);
  }

  // optional .mrdp.Event evt = 4;
  if (has_evt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->evt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mrdp.Message)
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mrdp.Message)
  // required .mrdp.MSG_ID id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->id(), target);
  }

  // optional .mrdp.Request req = 2;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->req(), target);
  }

  // optional .mrdp.Response resp = 3;
  if (has_resp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->resp(), target);
  }

  // optional .mrdp.Event evt = 4;
  if (has_evt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->evt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mrdp.Message)
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mrdp.MSG_ID id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->id());
    }

    // optional .mrdp.Request req = 2;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req());
    }

    // optional .mrdp.Response resp = 3;
    if (has_resp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resp());
    }

    // optional .mrdp.Event evt = 4;
    if (has_evt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->evt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_req()) {
      mutable_req()->::mrdp::Request::MergeFrom(from.req());
    }
    if (from.has_resp()) {
      mutable_resp()->::mrdp::Response::MergeFrom(from.resp());
    }
    if (from.has_evt()) {
      mutable_evt()->::mrdp::Event::MergeFrom(from.evt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_req()) {
    if (!this->req().IsInitialized()) return false;
  }
  if (has_resp()) {
    if (!this->resp().IsInitialized()) return false;
  }
  if (has_evt()) {
    if (!this->evt().IsInitialized()) return false;
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(req_, other->req_);
    std::swap(resp_, other->resp_);
    std::swap(evt_, other->evt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mrdp

// @@protoc_insertion_point(global_scope)
