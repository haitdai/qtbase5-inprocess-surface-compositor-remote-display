// MR Remote Display Protocol(MRDP)
// daihaitao@mindray.com
// changelog
// ver0.2.0.0
// changelog:
// 20160505, ver0.2.0.0 
//  *以树状结构定义所有的message
//  *增加包头(length + checksum)
// 20160428, ver0.1.0.0 
// initial version

package mrdp;

option optimize_for = SPEED;            // LITE_RUNTIME seems lack of fd-like serialization

//major(8bits).minor(8bits).revision(8bits).patch(8bits)
enum ProtocolVersion {
    PROTOVER_CURRENT = 0x00010000;
}

// On/Off switch
enum Switch {
    SW_OFF = 0;
    SW_ON = 1;
}

enum ScreenUpdateReportMode {
    SURM_ACTIVE = 0;            // server report actively
    SURM_PASSIVE = 1;           // server report passively(wait client query)
}

enum ScreenUpdateMode {
    SUM_FULL = 0;                       // full screen update
    SUM_INCREMENTAL = 1;                // incremental update
}

// ErrorNo of Request, 随Response上报
enum ErrorNo {
    ERR_SUCCESS = 0;
    ERR_FAILURE_GENERIC = 1;
    ERR_NOT_SUPPORTED = 2;
    ERR_INVALID_PARAMETER = 3;
    ERR_LZO = 4;
    // ... 
}

// server 支持的format,rgba-shift隐含在名字中,endian单独传(只影响像素)
enum Format {
    FMT_ARGB32_PREMUL = 0;    // argbp
    FMT_ARGB32 = 1;                  // argb
    FMT_RGB32 = 2;                   // rgb
    FMT_xBGR32 = 3;                  // xbgr
    FMT_RGBA32 = 4;                  // rgba
    FMT_BGRA32_PREMUL = 5;    // rgbap
    FMT_UYVY = 6;                    // uyvu
}

message Rect {
    required uint32 x = 1;
    required uint32 y = 2;
    required uint32 w = 3;
    required uint32 h = 4;
}

// client -> server requests:
enum MSG_ID {
    // requests
    REQUEST_NEGOTIATION = 0;     // client 发起会话协商
    REQUEST_CLOSE = 1;           // client 发起会话拆除
    REQUEST_MOTIONACTION = 2;    // client 下发鼠标移动
    REQUEST_BUTTONACTION = 3;    // client 下发鼠标按键
    REQUEST_KEYACTION = 4;       // client 下发键盘按键
    REQUEST_SCREENUPDATE = 5;    // client 下发请求更新(流控)
    REQUEST_SCREENUPDATEREPORTMODE = 6;

    // responses
    RESPONSE_NEGOTIATION = 100;     // server response: client connect request
    RESPONSE_CLOSE = 101;           // server response: client disconnect request

    // events
    EVENT_NEGOTIATION = 1000;          // server 会话协商事件(连接建立后server先发)
    EVENT_SCREENUPDATED = 1001;        // server screen update事件
    EVENT_SCREENRESIZED = 1002;        // server screen resize事件
    EVENT_SERVERSHUTDOWN = 1003;       // server 上报关闭，无需client应答    
}

// client 在 server 上报 negotiation event 后下发给 server, 有 resp
message NegotiateReq {
    required ProtocolVersion clientVersion = 1 [default = PROTOVER_CURRENT];   // client 选取的版本(不高于server支持的最高版本)
    required Switch compressPixels = 2;  // client 选取的像素压缩开关(只压缩像素)
    required ScreenUpdateReportMode surm = 3;
}

//client 主动拆除会话, 有 resp
message CloseReq {

}

// mouse move - 无 resp
message MotionActionReq {
    required uint32 x = 1;
    required uint32 y = 2;
}

// moue button/key - 无 resp
enum ButtonActionPress {
    BA_RELEASED = 0;
    BA_PRESSED = 1;
}
message ButtonActionReq {
    required uint32 button = 1;
    required ButtonActionPress pressed = 2;
}

// key - 无 resp
enum KeyActionDown {
    KA_UP = 0;
    KA_DOWN = 1;
}
message KeyActionReq {
    required uint32 key = 1;
    required KeyActionDown down = 2;
}

// 无 resp, 有 evt, ref. ScreenUpdatedEvt
message ScreenUpdateReq {
    required ScreenUpdateMode sum = 1;      // full/incremental
}

message ScreenUpdateReportModeReq {
    required ScreenUpdateReportMode surm = 1;  // active/passive
};

message Request {
    required uint32             clientID = 1;
    optional NegotiateReq       negoReq = 2;
    optional CloseReq           closeReq = 3;
    optional MotionActionReq    maReq = 4;
    optional ButtonActionReq    baReq = 5;
    optional KeyActionReq       kaReq = 6;
    optional ScreenUpdateReq    suReq = 7;
    optional ScreenUpdateReportModeReq  surmReq = 8;
}

message NegotiateResp {
    required ProtocolVersion serverVersion = 1 [default = PROTOVER_CURRENT];  // server 确认的版本(ErrorNo==0时必须与client下发的版本一致)
    required Format format = 2;             // server 像素的 format
    required Switch pixelInBigEndian = 3;   // server 像素是否为 big-endian    
    required Rect screenRect = 4;           // server 当前的 screen 矩形(只支持 1 个 screen)
}

message CloseResp {

}

message Response {
    required uint32 clientID = 1;
    required ErrorNo error = 2;     // 执行结果(errorno)        
    optional NegotiateResp      negoResp = 3;
    optional CloseResp          closeResp = 4;
}

message NegotiateEvt {
    required ProtocolVersion serverVersion = 1 [default = PROTOVER_CURRENT];       //server支持的最高协议版本
    required Switch compressPixelSuggestion = 2;    //server建议的像素压缩选项(On/Off)
    required ScreenUpdateReportMode surm = 3;
}

// 会话建立时 server 主动上报全屏 screen update, 后续由 client 查询才上报(1, 流控; 2, 脏区域)
message ScreenUpdatedEvt {
    repeated Rect dirtyRegion = 1;    //脏区域, server screen 坐标系(TODO: tiled ?)
    optional bytes dirtyPixels = 2;   //像素,只包含dirtyRegion中的(可选lzo 压缩)
}

message ScreenResizedEvt {
    required Rect screenRect = 1;   // 新的screen rect
}

message ServerShutdownEvt {

}

message Event {
    required uint32 clientID = 1;
    optional NegotiateEvt       negoEvt = 2;
    optional ScreenUpdatedEvt   suEvt = 3;
    optional ScreenResizedEvt   srEvt = 4;
    optional ServerShutdownEvt  ssEvt = 5;
}

// root pdu
message Message {
    required MSG_ID   id = 1;
    optional Request  req = 2;
    optional Response resp = 3;
    optional Event    evt = 4;
}

// 不支持剪贴板(client->server OR. server->client)

// 不支持认证

// 编码方式使用 protobuf 内置的, 不可配置

// 交互:
// server                                           client
//               {connected}
//               ......
//            总是server 发起会话建立
//            ---NegotiateEvt--->
//            <--NegotiateReq--
//            --NegotiateResp-->
//               {session established}
//               ......
//             --ScreenUpdatedEvt(when session established: dirty + pixels)-->
//             {
//              <--ScreenUpdateRequest--
//              --ScreenUpdatedEvt(dirty + pixel)-->
//             }*
//               ......
//             --ScreenResizedEvt-->
//             --ScreenUpdatedEvt(full)-->
//               ......
//             <--MouseActionReq/KeyActionReq--
//               ......
//            [ client 发起会话拆除(server有应答)
//             <--CloseReq--
//             --CloseResp-->
//            ]
//            [ server 发起会话拆除(client无需应答)
//              --ServerShutdownEvt-->
//            ]
//               {session shuted down}
